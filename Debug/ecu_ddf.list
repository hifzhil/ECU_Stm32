
ecu_ddf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080036f8  080036f8  000136f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003778  08003778  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003778  08003778  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003778  08003778  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003778  08003778  00013778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800377c  0800377c  0001377c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  20000070  080037f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  080037f0  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eedd  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000247f  00000000  00000000  0002efb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  00031438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c26  00000000  00000000  000323d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001916a  00000000  00000000  00032ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000115c4  00000000  00000000  0004c160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000914e0  00000000  00000000  0005d724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000462c  00000000  00000000  000eec04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000f3230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080036e0 	.word	0x080036e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080036e0 	.word	0x080036e0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fd37 	bl	8000bd4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f863 	bl	8000230 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 fa77 	bl	800065c <MX_GPIO_Init>
  MX_DMA_Init();
 800016e:	f000 fa57 	bl	8000620 <MX_DMA_Init>
  MX_ADC1_Init();
 8000172:	f000 f8b9 	bl	80002e8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000176:	f000 fa29 	bl	80005cc <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800017a:	f000 f923 	bl	80003c4 <MX_SPI1_Init>
  MX_FATFS_Init();
 800017e:	f002 fd29 	bl	8002bd4 <MX_FATFS_Init>
  MX_TIM2_Init();
 8000182:	f000 f955 	bl	8000430 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000186:	f000 f9b9 	bl	80004fc <MX_TIM3_Init>
  MX_ADC2_Init();
 800018a:	f000 f8dd 	bl	8000348 <MX_ADC2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  myprintf("\r\n~ Stm32 demo by Zhiel ~\r\n\r\n");
 800018e:	4811      	ldr	r0, [pc, #68]	; (80001d4 <main+0x78>)
 8000190:	f000 f828 	bl	80001e4 <myprintf>
//pb10 11
  HAL_TIM_Base_Start(&htim2);
 8000194:	4810      	ldr	r0, [pc, #64]	; (80001d8 <main+0x7c>)
 8000196:	f001 ffa9 	bl	80020ec <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Init(&htim2);
 800019a:	480f      	ldr	r0, [pc, #60]	; (80001d8 <main+0x7c>)
 800019c:	f001 fff0 	bl	8002180 <HAL_TIM_PWM_Init>

//pb1 0
  HAL_TIM_Base_Start(&htim3);
 80001a0:	480e      	ldr	r0, [pc, #56]	; (80001dc <main+0x80>)
 80001a2:	f001 ffa3 	bl	80020ec <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Init(&htim3);
 80001a6:	480d      	ldr	r0, [pc, #52]	; (80001dc <main+0x80>)
 80001a8:	f001 ffea 	bl	8002180 <HAL_TIM_PWM_Init>
//	  //HAL_ADC_Stop(&hadc1);
//	  myprintf("Pressure : %d Throttle : %d\r\n", ADC_VAL[0], ADC_VAL[1]);
//	  HAL_Delay(1000);
	  //myprintf("Throttle : %d\r\n", throttle);
    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80001ac:	2201      	movs	r2, #1
 80001ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001b2:	480b      	ldr	r0, [pc, #44]	; (80001e0 <main+0x84>)
 80001b4:	f001 fa38 	bl	8001628 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80001b8:	20c8      	movs	r0, #200	; 0xc8
 80001ba:	f000 fd6d 	bl	8000c98 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80001be:	2200      	movs	r2, #0
 80001c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c4:	4806      	ldr	r0, [pc, #24]	; (80001e0 <main+0x84>)
 80001c6:	f001 fa2f 	bl	8001628 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80001ca:	20c8      	movs	r0, #200	; 0xc8
 80001cc:	f000 fd64 	bl	8000c98 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80001d0:	e7ec      	b.n	80001ac <main+0x50>
 80001d2:	bf00      	nop
 80001d4:	080036f8 	.word	0x080036f8
 80001d8:	20000144 	.word	0x20000144
 80001dc:	2000018c 	.word	0x2000018c
 80001e0:	40011000 	.word	0x40011000

080001e4 <myprintf>:




void myprintf(const char *fmt, ...)
{
 80001e4:	b40f      	push	{r0, r1, r2, r3}
 80001e6:	b580      	push	{r7, lr}
 80001e8:	b082      	sub	sp, #8
 80001ea:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80001ec:	f107 0314 	add.w	r3, r7, #20
 80001f0:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	693a      	ldr	r2, [r7, #16]
 80001f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001fa:	480b      	ldr	r0, [pc, #44]	; (8000228 <myprintf+0x44>)
 80001fc:	f002 fdd0 	bl	8002da0 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000200:	4809      	ldr	r0, [pc, #36]	; (8000228 <myprintf+0x44>)
 8000202:	f7ff ffa3 	bl	800014c <strlen>
 8000206:	4603      	mov	r3, r0
 8000208:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, -1);
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	b29a      	uxth	r2, r3
 800020e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000212:	4905      	ldr	r1, [pc, #20]	; (8000228 <myprintf+0x44>)
 8000214:	4805      	ldr	r0, [pc, #20]	; (800022c <myprintf+0x48>)
 8000216:	f002 fb5d 	bl	80028d4 <HAL_UART_Transmit>

}
 800021a:	bf00      	nop
 800021c:	3708      	adds	r7, #8
 800021e:	46bd      	mov	sp, r7
 8000220:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000224:	b004      	add	sp, #16
 8000226:	4770      	bx	lr
 8000228:	2000021c 	.word	0x2000021c
 800022c:	200001d4 	.word	0x200001d4

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b094      	sub	sp, #80	; 0x50
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800023a:	2228      	movs	r2, #40	; 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f002 fdbc 	bl	8002dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	f107 0314 	add.w	r3, r7, #20
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000260:	2301      	movs	r3, #1
 8000262:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000268:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026e:	2301      	movs	r3, #1
 8000270:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000272:	2302      	movs	r3, #2
 8000274:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 800027c:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8000280:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000286:	4618      	mov	r0, r3
 8000288:	f001 f9e6 	bl	8001658 <HAL_RCC_OscConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000292:	f000 fa67 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000296:	230f      	movs	r3, #15
 8000298:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029a:	2302      	movs	r3, #2
 800029c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ac:	f107 0314 	add.w	r3, r7, #20
 80002b0:	2102      	movs	r1, #2
 80002b2:	4618      	mov	r0, r3
 80002b4:	f001 fc52 	bl	8001b5c <HAL_RCC_ClockConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002be:	f000 fa51 	bl	8000764 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002c2:	2302      	movs	r3, #2
 80002c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80002c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80002ca:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 fdd2 	bl	8001e78 <HAL_RCCEx_PeriphCLKConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002da:	f000 fa43 	bl	8000764 <Error_Handler>
  }
}
 80002de:	bf00      	nop
 80002e0:	3750      	adds	r7, #80	; 0x50
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002f8:	4b11      	ldr	r3, [pc, #68]	; (8000340 <MX_ADC1_Init+0x58>)
 80002fa:	4a12      	ldr	r2, [pc, #72]	; (8000344 <MX_ADC1_Init+0x5c>)
 80002fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002fe:	4b10      	ldr	r3, [pc, #64]	; (8000340 <MX_ADC1_Init+0x58>)
 8000300:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000304:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <MX_ADC1_Init+0x58>)
 8000308:	2201      	movs	r2, #1
 800030a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <MX_ADC1_Init+0x58>)
 800030e:	2200      	movs	r2, #0
 8000310:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <MX_ADC1_Init+0x58>)
 8000314:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000318:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800031a:	4b09      	ldr	r3, [pc, #36]	; (8000340 <MX_ADC1_Init+0x58>)
 800031c:	2200      	movs	r2, #0
 800031e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000320:	4b07      	ldr	r3, [pc, #28]	; (8000340 <MX_ADC1_Init+0x58>)
 8000322:	2201      	movs	r2, #1
 8000324:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000326:	4806      	ldr	r0, [pc, #24]	; (8000340 <MX_ADC1_Init+0x58>)
 8000328:	f000 fcda 	bl	8000ce0 <HAL_ADC_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000332:	f000 fa17 	bl	8000764 <Error_Handler>
//    Error_Handler();
//  }
//  /* USER CODE BEGIN ADC1_Init 2 */
//  /* USER CODE END ADC1_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	3710      	adds	r7, #16
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	2000008c 	.word	0x2000008c
 8000344:	40012400 	.word	0x40012400

08000348 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */
  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	605a      	str	r2, [r3, #4]
 8000356:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */
  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000358:	4b18      	ldr	r3, [pc, #96]	; (80003bc <MX_ADC2_Init+0x74>)
 800035a:	4a19      	ldr	r2, [pc, #100]	; (80003c0 <MX_ADC2_Init+0x78>)
 800035c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800035e:	4b17      	ldr	r3, [pc, #92]	; (80003bc <MX_ADC2_Init+0x74>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000364:	4b15      	ldr	r3, [pc, #84]	; (80003bc <MX_ADC2_Init+0x74>)
 8000366:	2200      	movs	r2, #0
 8000368:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800036a:	4b14      	ldr	r3, [pc, #80]	; (80003bc <MX_ADC2_Init+0x74>)
 800036c:	2200      	movs	r2, #0
 800036e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000370:	4b12      	ldr	r3, [pc, #72]	; (80003bc <MX_ADC2_Init+0x74>)
 8000372:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000376:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000378:	4b10      	ldr	r3, [pc, #64]	; (80003bc <MX_ADC2_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800037e:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <MX_ADC2_Init+0x74>)
 8000380:	2201      	movs	r2, #1
 8000382:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000384:	480d      	ldr	r0, [pc, #52]	; (80003bc <MX_ADC2_Init+0x74>)
 8000386:	f000 fcab 	bl	8000ce0 <HAL_ADC_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000390:	f000 f9e8 	bl	8000764 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000394:	2302      	movs	r3, #2
 8000396:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000398:	2301      	movs	r3, #1
 800039a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	4619      	mov	r1, r3
 80003a4:	4805      	ldr	r0, [pc, #20]	; (80003bc <MX_ADC2_Init+0x74>)
 80003a6:	f000 fd73 	bl	8000e90 <HAL_ADC_ConfigChannel>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80003b0:	f000 f9d8 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  /* USER CODE END ADC2_Init 2 */

}
 80003b4:	bf00      	nop
 80003b6:	3710      	adds	r7, #16
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	200000bc 	.word	0x200000bc
 80003c0:	40012800 	.word	0x40012800

080003c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003c8:	4b17      	ldr	r3, [pc, #92]	; (8000428 <MX_SPI1_Init+0x64>)
 80003ca:	4a18      	ldr	r2, [pc, #96]	; (800042c <MX_SPI1_Init+0x68>)
 80003cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003ce:	4b16      	ldr	r3, [pc, #88]	; (8000428 <MX_SPI1_Init+0x64>)
 80003d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003d6:	4b14      	ldr	r3, [pc, #80]	; (8000428 <MX_SPI1_Init+0x64>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <MX_SPI1_Init+0x64>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003e2:	4b11      	ldr	r3, [pc, #68]	; (8000428 <MX_SPI1_Init+0x64>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <MX_SPI1_Init+0x64>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <MX_SPI1_Init+0x64>)
 80003f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80003f6:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <MX_SPI1_Init+0x64>)
 80003f8:	2238      	movs	r2, #56	; 0x38
 80003fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003fc:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <MX_SPI1_Init+0x64>)
 80003fe:	2200      	movs	r2, #0
 8000400:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_SPI1_Init+0x64>)
 8000404:	2200      	movs	r2, #0
 8000406:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000408:	4b07      	ldr	r3, [pc, #28]	; (8000428 <MX_SPI1_Init+0x64>)
 800040a:	2200      	movs	r2, #0
 800040c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800040e:	4b06      	ldr	r3, [pc, #24]	; (8000428 <MX_SPI1_Init+0x64>)
 8000410:	220a      	movs	r2, #10
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000414:	4804      	ldr	r0, [pc, #16]	; (8000428 <MX_SPI1_Init+0x64>)
 8000416:	f001 fde5 	bl	8001fe4 <HAL_SPI_Init>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000420:	f000 f9a0 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */

}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}
 8000428:	200000ec 	.word	0x200000ec
 800042c:	40013000 	.word	0x40013000

08000430 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b08a      	sub	sp, #40	; 0x28
 8000434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000436:	f107 0320 	add.w	r3, r7, #32
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]
 800044c:	611a      	str	r2, [r3, #16]
 800044e:	615a      	str	r2, [r3, #20]
 8000450:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000452:	4b29      	ldr	r3, [pc, #164]	; (80004f8 <MX_TIM2_Init+0xc8>)
 8000454:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000458:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800045a:	4b27      	ldr	r3, [pc, #156]	; (80004f8 <MX_TIM2_Init+0xc8>)
 800045c:	2247      	movs	r2, #71	; 0x47
 800045e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000460:	4b25      	ldr	r3, [pc, #148]	; (80004f8 <MX_TIM2_Init+0xc8>)
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000466:	4b24      	ldr	r3, [pc, #144]	; (80004f8 <MX_TIM2_Init+0xc8>)
 8000468:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800046c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800046e:	4b22      	ldr	r3, [pc, #136]	; (80004f8 <MX_TIM2_Init+0xc8>)
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000474:	4b20      	ldr	r3, [pc, #128]	; (80004f8 <MX_TIM2_Init+0xc8>)
 8000476:	2200      	movs	r2, #0
 8000478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800047a:	481f      	ldr	r0, [pc, #124]	; (80004f8 <MX_TIM2_Init+0xc8>)
 800047c:	f001 fe80 	bl	8002180 <HAL_TIM_PWM_Init>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000486:	f000 f96d 	bl	8000764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800048a:	2300      	movs	r3, #0
 800048c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800048e:	2300      	movs	r3, #0
 8000490:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000492:	f107 0320 	add.w	r3, r7, #32
 8000496:	4619      	mov	r1, r3
 8000498:	4817      	ldr	r0, [pc, #92]	; (80004f8 <MX_TIM2_Init+0xc8>)
 800049a:	f002 f96d 	bl	8002778 <HAL_TIMEx_MasterConfigSynchronization>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80004a4:	f000 f95e 	bl	8000764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004a8:	2360      	movs	r3, #96	; 0x60
 80004aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 700;
 80004ac:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80004b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2208      	movs	r2, #8
 80004be:	4619      	mov	r1, r3
 80004c0:	480d      	ldr	r0, [pc, #52]	; (80004f8 <MX_TIM2_Init+0xc8>)
 80004c2:	f001 fead 	bl	8002220 <HAL_TIM_PWM_ConfigChannel>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80004cc:	f000 f94a 	bl	8000764 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	220c      	movs	r2, #12
 80004d8:	4619      	mov	r1, r3
 80004da:	4807      	ldr	r0, [pc, #28]	; (80004f8 <MX_TIM2_Init+0xc8>)
 80004dc:	f001 fea0 	bl	8002220 <HAL_TIM_PWM_ConfigChannel>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80004e6:	f000 f93d 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004ea:	4803      	ldr	r0, [pc, #12]	; (80004f8 <MX_TIM2_Init+0xc8>)
 80004ec:	f000 fa28 	bl	8000940 <HAL_TIM_MspPostInit>

}
 80004f0:	bf00      	nop
 80004f2:	3728      	adds	r7, #40	; 0x28
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000144 	.word	0x20000144

080004fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08a      	sub	sp, #40	; 0x28
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]
 800051a:	615a      	str	r2, [r3, #20]
 800051c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800051e:	4b29      	ldr	r3, [pc, #164]	; (80005c4 <MX_TIM3_Init+0xc8>)
 8000520:	4a29      	ldr	r2, [pc, #164]	; (80005c8 <MX_TIM3_Init+0xcc>)
 8000522:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000524:	4b27      	ldr	r3, [pc, #156]	; (80005c4 <MX_TIM3_Init+0xc8>)
 8000526:	2247      	movs	r2, #71	; 0x47
 8000528:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800052a:	4b26      	ldr	r3, [pc, #152]	; (80005c4 <MX_TIM3_Init+0xc8>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000530:	4b24      	ldr	r3, [pc, #144]	; (80005c4 <MX_TIM3_Init+0xc8>)
 8000532:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000536:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000538:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <MX_TIM3_Init+0xc8>)
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800053e:	4b21      	ldr	r3, [pc, #132]	; (80005c4 <MX_TIM3_Init+0xc8>)
 8000540:	2280      	movs	r2, #128	; 0x80
 8000542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000544:	481f      	ldr	r0, [pc, #124]	; (80005c4 <MX_TIM3_Init+0xc8>)
 8000546:	f001 fe1b 	bl	8002180 <HAL_TIM_PWM_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000550:	f000 f908 	bl	8000764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000554:	2300      	movs	r3, #0
 8000556:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000558:	2300      	movs	r3, #0
 800055a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800055c:	f107 0320 	add.w	r3, r7, #32
 8000560:	4619      	mov	r1, r3
 8000562:	4818      	ldr	r0, [pc, #96]	; (80005c4 <MX_TIM3_Init+0xc8>)
 8000564:	f002 f908 	bl	8002778 <HAL_TIMEx_MasterConfigSynchronization>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800056e:	f000 f8f9 	bl	8000764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000572:	2360      	movs	r3, #96	; 0x60
 8000574:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2208      	movs	r2, #8
 8000586:	4619      	mov	r1, r3
 8000588:	480e      	ldr	r0, [pc, #56]	; (80005c4 <MX_TIM3_Init+0xc8>)
 800058a:	f001 fe49 	bl	8002220 <HAL_TIM_PWM_ConfigChannel>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000594:	f000 f8e6 	bl	8000764 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 8000598:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800059c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	220c      	movs	r2, #12
 80005a2:	4619      	mov	r1, r3
 80005a4:	4807      	ldr	r0, [pc, #28]	; (80005c4 <MX_TIM3_Init+0xc8>)
 80005a6:	f001 fe3b 	bl	8002220 <HAL_TIM_PWM_ConfigChannel>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80005b0:	f000 f8d8 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <MX_TIM3_Init+0xc8>)
 80005b6:	f000 f9c3 	bl	8000940 <HAL_TIM_MspPostInit>

}
 80005ba:	bf00      	nop
 80005bc:	3728      	adds	r7, #40	; 0x28
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	2000018c 	.word	0x2000018c
 80005c8:	40000400 	.word	0x40000400

080005cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005d2:	4a12      	ldr	r2, [pc, #72]	; (800061c <MX_USART1_UART_Init+0x50>)
 80005d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005f2:	220c      	movs	r2, #12
 80005f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <MX_USART1_UART_Init+0x4c>)
 8000604:	f002 f916 	bl	8002834 <HAL_UART_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800060e:	f000 f8a9 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200001d4 	.word	0x200001d4
 800061c:	40013800 	.word	0x40013800

08000620 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_DMA_Init+0x38>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <MX_DMA_Init+0x38>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_DMA_Init+0x38>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2100      	movs	r1, #0
 8000642:	200b      	movs	r0, #11
 8000644:	f000 fe35 	bl	80012b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000648:	200b      	movs	r0, #11
 800064a:	f000 fe4e 	bl	80012ea <HAL_NVIC_EnableIRQ>

}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 0310 	add.w	r3, r7, #16
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000670:	4b38      	ldr	r3, [pc, #224]	; (8000754 <MX_GPIO_Init+0xf8>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a37      	ldr	r2, [pc, #220]	; (8000754 <MX_GPIO_Init+0xf8>)
 8000676:	f043 0310 	orr.w	r3, r3, #16
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b35      	ldr	r3, [pc, #212]	; (8000754 <MX_GPIO_Init+0xf8>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f003 0310 	and.w	r3, r3, #16
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000688:	4b32      	ldr	r3, [pc, #200]	; (8000754 <MX_GPIO_Init+0xf8>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a31      	ldr	r2, [pc, #196]	; (8000754 <MX_GPIO_Init+0xf8>)
 800068e:	f043 0320 	orr.w	r3, r3, #32
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <MX_GPIO_Init+0xf8>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f003 0320 	and.w	r3, r3, #32
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a0:	4b2c      	ldr	r3, [pc, #176]	; (8000754 <MX_GPIO_Init+0xf8>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a2b      	ldr	r2, [pc, #172]	; (8000754 <MX_GPIO_Init+0xf8>)
 80006a6:	f043 0304 	orr.w	r3, r3, #4
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b29      	ldr	r3, [pc, #164]	; (8000754 <MX_GPIO_Init+0xf8>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f003 0304 	and.w	r3, r3, #4
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b8:	4b26      	ldr	r3, [pc, #152]	; (8000754 <MX_GPIO_Init+0xf8>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a25      	ldr	r2, [pc, #148]	; (8000754 <MX_GPIO_Init+0xf8>)
 80006be:	f043 0308 	orr.w	r3, r3, #8
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b23      	ldr	r3, [pc, #140]	; (8000754 <MX_GPIO_Init+0xf8>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0308 	and.w	r3, r3, #8
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buildin_Led_GPIO_Port, Buildin_Led_Pin, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d6:	4820      	ldr	r0, [pc, #128]	; (8000758 <MX_GPIO_Init+0xfc>)
 80006d8:	f000 ffa6 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2110      	movs	r1, #16
 80006e0:	481e      	ldr	r0, [pc, #120]	; (800075c <MX_GPIO_Init+0x100>)
 80006e2:	f000 ffa1 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEMP1_Pin|TEMP2_Pin|TEMP3_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f248 0118 	movw	r1, #32792	; 0x8018
 80006ec:	481c      	ldr	r0, [pc, #112]	; (8000760 <MX_GPIO_Init+0x104>)
 80006ee:	f000 ff9b 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Buildin_Led_Pin */
  GPIO_InitStruct.Pin = Buildin_Led_Pin;
 80006f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2302      	movs	r3, #2
 8000702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Buildin_Led_GPIO_Port, &GPIO_InitStruct);
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	4619      	mov	r1, r3
 800070a:	4813      	ldr	r0, [pc, #76]	; (8000758 <MX_GPIO_Init+0xfc>)
 800070c:	f000 fe08 	bl	8001320 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SD_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin;
 8000710:	2310      	movs	r3, #16
 8000712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	2301      	movs	r3, #1
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	2302      	movs	r3, #2
 800071e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_SD_GPIO_Port, &GPIO_InitStruct);
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	4619      	mov	r1, r3
 8000726:	480d      	ldr	r0, [pc, #52]	; (800075c <MX_GPIO_Init+0x100>)
 8000728:	f000 fdfa 	bl	8001320 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEMP1_Pin TEMP2_Pin TEMP3_Pin */
  GPIO_InitStruct.Pin = TEMP1_Pin|TEMP2_Pin|TEMP3_Pin;
 800072c:	f248 0318 	movw	r3, #32792	; 0x8018
 8000730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2302      	movs	r3, #2
 800073c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073e:	f107 0310 	add.w	r3, r7, #16
 8000742:	4619      	mov	r1, r3
 8000744:	4806      	ldr	r0, [pc, #24]	; (8000760 <MX_GPIO_Init+0x104>)
 8000746:	f000 fdeb 	bl	8001320 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074a:	bf00      	nop
 800074c:	3720      	adds	r7, #32
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000
 8000758:	40011000 	.word	0x40011000
 800075c:	40010800 	.word	0x40010800
 8000760:	40010c00 	.word	0x40010c00

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <HAL_MspInit+0x5c>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	4a14      	ldr	r2, [pc, #80]	; (80007cc <HAL_MspInit+0x5c>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6193      	str	r3, [r2, #24]
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_MspInit+0x5c>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_MspInit+0x5c>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <HAL_MspInit+0x5c>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000798:	61d3      	str	r3, [r2, #28]
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <HAL_MspInit+0x5c>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <HAL_MspInit+0x60>)
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <HAL_MspInit+0x60>)
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c2:	bf00      	nop
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	40021000 	.word	0x40021000
 80007d0:	40010000 	.word	0x40010000

080007d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a14      	ldr	r2, [pc, #80]	; (8000840 <HAL_ADC_MspInit+0x6c>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d121      	bne.n	8000838 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007f4:	4b13      	ldr	r3, [pc, #76]	; (8000844 <HAL_ADC_MspInit+0x70>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a12      	ldr	r2, [pc, #72]	; (8000844 <HAL_ADC_MspInit+0x70>)
 80007fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b10      	ldr	r3, [pc, #64]	; (8000844 <HAL_ADC_MspInit+0x70>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080c:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <HAL_ADC_MspInit+0x70>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a0c      	ldr	r2, [pc, #48]	; (8000844 <HAL_ADC_MspInit+0x70>)
 8000812:	f043 0304 	orr.w	r3, r3, #4
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <HAL_ADC_MspInit+0x70>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0304 	and.w	r3, r3, #4
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Throttle_Pin|Pressure_Pin;
 8000824:	2303      	movs	r3, #3
 8000826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000828:	2303      	movs	r3, #3
 800082a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	4619      	mov	r1, r3
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <HAL_ADC_MspInit+0x74>)
 8000834:	f000 fd74 	bl	8001320 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000838:	bf00      	nop
 800083a:	3720      	adds	r7, #32
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40012400 	.word	0x40012400
 8000844:	40021000 	.word	0x40021000
 8000848:	40010800 	.word	0x40010800

0800084c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a1b      	ldr	r2, [pc, #108]	; (80008d4 <HAL_SPI_MspInit+0x88>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d12f      	bne.n	80008cc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <HAL_SPI_MspInit+0x8c>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a19      	ldr	r2, [pc, #100]	; (80008d8 <HAL_SPI_MspInit+0x8c>)
 8000872:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <HAL_SPI_MspInit+0x8c>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <HAL_SPI_MspInit+0x8c>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <HAL_SPI_MspInit+0x8c>)
 800088a:	f043 0304 	orr.w	r3, r3, #4
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <HAL_SPI_MspInit+0x8c>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800089c:	23a0      	movs	r3, #160	; 0xa0
 800089e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4619      	mov	r1, r3
 80008ae:	480b      	ldr	r0, [pc, #44]	; (80008dc <HAL_SPI_MspInit+0x90>)
 80008b0:	f000 fd36 	bl	8001320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008b4:	2340      	movs	r3, #64	; 0x40
 80008b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	4619      	mov	r1, r3
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <HAL_SPI_MspInit+0x90>)
 80008c8:	f000 fd2a 	bl	8001320 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008cc:	bf00      	nop
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40013000 	.word	0x40013000
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40010800 	.word	0x40010800

080008e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008f0:	d10c      	bne.n	800090c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <HAL_TIM_PWM_MspInit+0x58>)
 80008f4:	69db      	ldr	r3, [r3, #28]
 80008f6:	4a10      	ldr	r2, [pc, #64]	; (8000938 <HAL_TIM_PWM_MspInit+0x58>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	61d3      	str	r3, [r2, #28]
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <HAL_TIM_PWM_MspInit+0x58>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800090a:	e010      	b.n	800092e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a0a      	ldr	r2, [pc, #40]	; (800093c <HAL_TIM_PWM_MspInit+0x5c>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d10b      	bne.n	800092e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_TIM_PWM_MspInit+0x58>)
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	4a07      	ldr	r2, [pc, #28]	; (8000938 <HAL_TIM_PWM_MspInit+0x58>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	61d3      	str	r3, [r2, #28]
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <HAL_TIM_PWM_MspInit+0x58>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	40021000 	.word	0x40021000
 800093c:	40000400 	.word	0x40000400

08000940 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800095e:	d12b      	bne.n	80009b8 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000960:	4b26      	ldr	r3, [pc, #152]	; (80009fc <HAL_TIM_MspPostInit+0xbc>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a25      	ldr	r2, [pc, #148]	; (80009fc <HAL_TIM_MspPostInit+0xbc>)
 8000966:	f043 0308 	orr.w	r3, r3, #8
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <HAL_TIM_MspPostInit+0xbc>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0308 	and.w	r3, r3, #8
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000978:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800097c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2302      	movs	r3, #2
 8000984:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	481c      	ldr	r0, [pc, #112]	; (8000a00 <HAL_TIM_MspPostInit+0xc0>)
 800098e:	f000 fcc7 	bl	8001320 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <HAL_TIM_MspPostInit+0xc4>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
 8000998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
 80009a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
 80009b0:	4a14      	ldr	r2, [pc, #80]	; (8000a04 <HAL_TIM_MspPostInit+0xc4>)
 80009b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80009b6:	e01c      	b.n	80009f2 <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM3)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <HAL_TIM_MspPostInit+0xc8>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d117      	bne.n	80009f2 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_TIM_MspPostInit+0xbc>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <HAL_TIM_MspPostInit+0xbc>)
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	6193      	str	r3, [r2, #24]
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <HAL_TIM_MspPostInit+0xbc>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009da:	2303      	movs	r3, #3
 80009dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2302      	movs	r3, #2
 80009e4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <HAL_TIM_MspPostInit+0xc0>)
 80009ee:	f000 fc97 	bl	8001320 <HAL_GPIO_Init>
}
 80009f2:	bf00      	nop
 80009f4:	3728      	adds	r7, #40	; 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40010c00 	.word	0x40010c00
 8000a04:	40010000 	.word	0x40010000
 8000a08:	40000400 	.word	0x40000400

08000a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a22      	ldr	r2, [pc, #136]	; (8000ab0 <HAL_UART_MspInit+0xa4>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d13d      	bne.n	8000aa8 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a2c:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <HAL_UART_MspInit+0xa8>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a20      	ldr	r2, [pc, #128]	; (8000ab4 <HAL_UART_MspInit+0xa8>)
 8000a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <HAL_UART_MspInit+0xa8>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <HAL_UART_MspInit+0xa8>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a1a      	ldr	r2, [pc, #104]	; (8000ab4 <HAL_UART_MspInit+0xa8>)
 8000a4a:	f043 0308 	orr.w	r3, r3, #8
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_UART_MspInit+0xa8>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0308 	and.w	r3, r3, #8
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a5c:	2340      	movs	r3, #64	; 0x40
 8000a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4812      	ldr	r0, [pc, #72]	; (8000ab8 <HAL_UART_MspInit+0xac>)
 8000a70:	f000 fc56 	bl	8001320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <HAL_UART_MspInit+0xac>)
 8000a88:	f000 fc4a 	bl	8001320 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <HAL_UART_MspInit+0xb0>)
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
 8000a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a94:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
 8000a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8000aa2:	4a06      	ldr	r2, [pc, #24]	; (8000abc <HAL_UART_MspInit+0xb0>)
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40013800 	.word	0x40013800
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010c00 	.word	0x40010c00
 8000abc:	40010000 	.word	0x40010000

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <UsageFault_Handler+0x4>

08000ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr

08000aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr

08000af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr

08000b02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b06:	f000 f8ab 	bl	8000c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <_sbrk+0x5c>)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <_sbrk+0x60>)
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <_sbrk+0x64>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <_sbrk+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d207      	bcs.n	8000b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b40:	f002 f944 	bl	8002dcc <__errno>
 8000b44:	4603      	mov	r3, r0
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <_sbrk+0x64>)
 8000b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20005000 	.word	0x20005000
 8000b70:	00000400 	.word	0x00000400
 8000b74:	2000031c 	.word	0x2000031c
 8000b78:	20000480 	.word	0x20000480

08000b7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b88:	f7ff fff8 	bl	8000b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480b      	ldr	r0, [pc, #44]	; (8000bbc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b8e:	490c      	ldr	r1, [pc, #48]	; (8000bc0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b90:	4a0c      	ldr	r2, [pc, #48]	; (8000bc4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a09      	ldr	r2, [pc, #36]	; (8000bc8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ba4:	4c09      	ldr	r4, [pc, #36]	; (8000bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb2:	f002 f911 	bl	8002dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bb6:	f7ff fad1 	bl	800015c <main>
  bx lr
 8000bba:	4770      	bx	lr
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bc4:	08003780 	.word	0x08003780
  ldr r2, =_sbss
 8000bc8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bcc:	20000480 	.word	0x20000480

08000bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC1_2_IRQHandler>
	...

08000bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_Init+0x28>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <HAL_Init+0x28>)
 8000bde:	f043 0310 	orr.w	r3, r3, #16
 8000be2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 fb59 	bl	800129c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bea:	200f      	movs	r0, #15
 8000bec:	f000 f808 	bl	8000c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf0:	f7ff fdbe 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40022000 	.word	0x40022000

08000c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_InitTick+0x54>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_InitTick+0x58>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4619      	mov	r1, r3
 8000c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 fb71 	bl	8001306 <HAL_SYSTICK_Config>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e00e      	b.n	8000c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d80a      	bhi.n	8000c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c34:	2200      	movs	r2, #0
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f000 fb39 	bl	80012b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c40:	4a06      	ldr	r2, [pc, #24]	; (8000c5c <HAL_InitTick+0x5c>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c46:	2300      	movs	r3, #0
 8000c48:	e000      	b.n	8000c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000000 	.word	0x20000000
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	20000004 	.word	0x20000004

08000c60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <HAL_IncTick+0x1c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <HAL_IncTick+0x20>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a03      	ldr	r2, [pc, #12]	; (8000c80 <HAL_IncTick+0x20>)
 8000c72:	6013      	str	r3, [r2, #0]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000320 	.word	0x20000320

08000c84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b02      	ldr	r3, [pc, #8]	; (8000c94 <HAL_GetTick+0x10>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	20000320 	.word	0x20000320

08000c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca0:	f7ff fff0 	bl	8000c84 <HAL_GetTick>
 8000ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cb0:	d005      	beq.n	8000cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_Delay+0x44>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4413      	add	r3, r2
 8000cbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cbe:	bf00      	nop
 8000cc0:	f7ff ffe0 	bl	8000c84 <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d8f7      	bhi.n	8000cc0 <HAL_Delay+0x28>
  {
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008

08000ce0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d101      	bne.n	8000d02 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e0be      	b.n	8000e80 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d109      	bne.n	8000d24 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff fd58 	bl	80007d4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f000 f9ab 	bl	8001080 <ADC_ConversionStop_Disable>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d32:	f003 0310 	and.w	r3, r3, #16
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f040 8099 	bne.w	8000e6e <HAL_ADC_Init+0x18e>
 8000d3c:	7dfb      	ldrb	r3, [r7, #23]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8095 	bne.w	8000e6e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d4c:	f023 0302 	bic.w	r3, r3, #2
 8000d50:	f043 0202 	orr.w	r2, r3, #2
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d60:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	7b1b      	ldrb	r3, [r3, #12]
 8000d66:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d68:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d78:	d003      	beq.n	8000d82 <HAL_ADC_Init+0xa2>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d102      	bne.n	8000d88 <HAL_ADC_Init+0xa8>
 8000d82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d86:	e000      	b.n	8000d8a <HAL_ADC_Init+0xaa>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7d1b      	ldrb	r3, [r3, #20]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d119      	bne.n	8000dcc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	7b1b      	ldrb	r3, [r3, #12]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d109      	bne.n	8000db4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	3b01      	subs	r3, #1
 8000da6:	035a      	lsls	r2, r3, #13
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	e00b      	b.n	8000dcc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db8:	f043 0220 	orr.w	r2, r3, #32
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc4:	f043 0201 	orr.w	r2, r3, #1
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <HAL_ADC_Init+0x1a8>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	6812      	ldr	r2, [r2, #0]
 8000dee:	68b9      	ldr	r1, [r7, #8]
 8000df0:	430b      	orrs	r3, r1
 8000df2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dfc:	d003      	beq.n	8000e06 <HAL_ADC_Init+0x126>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d104      	bne.n	8000e10 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	691b      	ldr	r3, [r3, #16]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	051b      	lsls	r3, r3, #20
 8000e0e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e16:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	430a      	orrs	r2, r1
 8000e22:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <HAL_ADC_Init+0x1ac>)
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d10b      	bne.n	8000e4c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3e:	f023 0303 	bic.w	r3, r3, #3
 8000e42:	f043 0201 	orr.w	r2, r3, #1
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e4a:	e018      	b.n	8000e7e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e50:	f023 0312 	bic.w	r3, r3, #18
 8000e54:	f043 0210 	orr.w	r2, r3, #16
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e60:	f043 0201 	orr.w	r2, r3, #1
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e6c:	e007      	b.n	8000e7e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e72:	f043 0210 	orr.w	r2, r3, #16
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	ffe1f7fd 	.word	0xffe1f7fd
 8000e8c:	ff1f0efe 	.word	0xff1f0efe

08000e90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d101      	bne.n	8000eb0 <HAL_ADC_ConfigChannel+0x20>
 8000eac:	2302      	movs	r3, #2
 8000eae:	e0dc      	b.n	800106a <HAL_ADC_ConfigChannel+0x1da>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b06      	cmp	r3, #6
 8000ebe:	d81c      	bhi.n	8000efa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685a      	ldr	r2, [r3, #4]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	4413      	add	r3, r2
 8000ed0:	3b05      	subs	r3, #5
 8000ed2:	221f      	movs	r2, #31
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	4019      	ands	r1, r3
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	6818      	ldr	r0, [r3, #0]
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	3b05      	subs	r3, #5
 8000eec:	fa00 f203 	lsl.w	r2, r0, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ef8:	e03c      	b.n	8000f74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2b0c      	cmp	r3, #12
 8000f00:	d81c      	bhi.n	8000f3c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	3b23      	subs	r3, #35	; 0x23
 8000f14:	221f      	movs	r2, #31
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	4019      	ands	r1, r3
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	6818      	ldr	r0, [r3, #0]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	3b23      	subs	r3, #35	; 0x23
 8000f2e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	430a      	orrs	r2, r1
 8000f38:	631a      	str	r2, [r3, #48]	; 0x30
 8000f3a:	e01b      	b.n	8000f74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	3b41      	subs	r3, #65	; 0x41
 8000f4e:	221f      	movs	r2, #31
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	4019      	ands	r1, r3
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	6818      	ldr	r0, [r3, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	4613      	mov	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	3b41      	subs	r3, #65	; 0x41
 8000f68:	fa00 f203 	lsl.w	r2, r0, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b09      	cmp	r3, #9
 8000f7a:	d91c      	bls.n	8000fb6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	68d9      	ldr	r1, [r3, #12]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	4613      	mov	r3, r2
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	3b1e      	subs	r3, #30
 8000f8e:	2207      	movs	r2, #7
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	4019      	ands	r1, r3
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	6898      	ldr	r0, [r3, #8]
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4413      	add	r3, r2
 8000fa6:	3b1e      	subs	r3, #30
 8000fa8:	fa00 f203 	lsl.w	r2, r0, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	e019      	b.n	8000fea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6919      	ldr	r1, [r3, #16]
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	2207      	movs	r2, #7
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	4019      	ands	r1, r3
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	6898      	ldr	r0, [r3, #8]
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	fa00 f203 	lsl.w	r2, r0, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b10      	cmp	r3, #16
 8000ff0:	d003      	beq.n	8000ffa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ff6:	2b11      	cmp	r3, #17
 8000ff8:	d132      	bne.n	8001060 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a1d      	ldr	r2, [pc, #116]	; (8001074 <HAL_ADC_ConfigChannel+0x1e4>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d125      	bne.n	8001050 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d126      	bne.n	8001060 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001020:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b10      	cmp	r3, #16
 8001028:	d11a      	bne.n	8001060 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800102a:	4b13      	ldr	r3, [pc, #76]	; (8001078 <HAL_ADC_ConfigChannel+0x1e8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a13      	ldr	r2, [pc, #76]	; (800107c <HAL_ADC_ConfigChannel+0x1ec>)
 8001030:	fba2 2303 	umull	r2, r3, r2, r3
 8001034:	0c9a      	lsrs	r2, r3, #18
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001040:	e002      	b.n	8001048 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	3b01      	subs	r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1f9      	bne.n	8001042 <HAL_ADC_ConfigChannel+0x1b2>
 800104e:	e007      	b.n	8001060 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001054:	f043 0220 	orr.w	r2, r3, #32
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001068:	7bfb      	ldrb	r3, [r7, #15]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	40012400 	.word	0x40012400
 8001078:	20000000 	.word	0x20000000
 800107c:	431bde83 	.word	0x431bde83

08001080 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b01      	cmp	r3, #1
 8001098:	d12e      	bne.n	80010f8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 0201 	bic.w	r2, r2, #1
 80010a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010aa:	f7ff fdeb 	bl	8000c84 <HAL_GetTick>
 80010ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010b0:	e01b      	b.n	80010ea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010b2:	f7ff fde7 	bl	8000c84 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d914      	bls.n	80010ea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d10d      	bne.n	80010ea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d2:	f043 0210 	orr.w	r2, r3, #16
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010de:	f043 0201 	orr.w	r2, r3, #1
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e007      	b.n	80010fa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d0dc      	beq.n	80010b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001120:	4013      	ands	r3, r2
 8001122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800112c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001136:	4a04      	ldr	r2, [pc, #16]	; (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	60d3      	str	r3, [r2, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <__NVIC_GetPriorityGrouping+0x18>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	f003 0307 	and.w	r3, r3, #7
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	2b00      	cmp	r3, #0
 8001178:	db0b      	blt.n	8001192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	f003 021f 	and.w	r2, r3, #31
 8001180:	4906      	ldr	r1, [pc, #24]	; (800119c <__NVIC_EnableIRQ+0x34>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	095b      	lsrs	r3, r3, #5
 8001188:	2001      	movs	r0, #1
 800118a:	fa00 f202 	lsl.w	r2, r0, r2
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	e000e100 	.word	0xe000e100

080011a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	db0a      	blt.n	80011ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	490c      	ldr	r1, [pc, #48]	; (80011ec <__NVIC_SetPriority+0x4c>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	440b      	add	r3, r1
 80011c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c8:	e00a      	b.n	80011e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4908      	ldr	r1, [pc, #32]	; (80011f0 <__NVIC_SetPriority+0x50>)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	3b04      	subs	r3, #4
 80011d8:	0112      	lsls	r2, r2, #4
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	440b      	add	r3, r1
 80011de:	761a      	strb	r2, [r3, #24]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000e100 	.word	0xe000e100
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f1c3 0307 	rsb	r3, r3, #7
 800120e:	2b04      	cmp	r3, #4
 8001210:	bf28      	it	cs
 8001212:	2304      	movcs	r3, #4
 8001214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3304      	adds	r3, #4
 800121a:	2b06      	cmp	r3, #6
 800121c:	d902      	bls.n	8001224 <NVIC_EncodePriority+0x30>
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3b03      	subs	r3, #3
 8001222:	e000      	b.n	8001226 <NVIC_EncodePriority+0x32>
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	401a      	ands	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800123c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	43d9      	mvns	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	4313      	orrs	r3, r2
         );
}
 800124e:	4618      	mov	r0, r3
 8001250:	3724      	adds	r7, #36	; 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001268:	d301      	bcc.n	800126e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800126a:	2301      	movs	r3, #1
 800126c:	e00f      	b.n	800128e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <SysTick_Config+0x40>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001276:	210f      	movs	r1, #15
 8001278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800127c:	f7ff ff90 	bl	80011a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <SysTick_Config+0x40>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001286:	4b04      	ldr	r3, [pc, #16]	; (8001298 <SysTick_Config+0x40>)
 8001288:	2207      	movs	r2, #7
 800128a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	e000e010 	.word	0xe000e010

0800129c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff ff2d 	bl	8001104 <__NVIC_SetPriorityGrouping>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b086      	sub	sp, #24
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
 80012be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c4:	f7ff ff42 	bl	800114c <__NVIC_GetPriorityGrouping>
 80012c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	68b9      	ldr	r1, [r7, #8]
 80012ce:	6978      	ldr	r0, [r7, #20]
 80012d0:	f7ff ff90 	bl	80011f4 <NVIC_EncodePriority>
 80012d4:	4602      	mov	r2, r0
 80012d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff5f 	bl	80011a0 <__NVIC_SetPriority>
}
 80012e2:	bf00      	nop
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff35 	bl	8001168 <__NVIC_EnableIRQ>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ffa2 	bl	8001258 <SysTick_Config>
 8001314:	4603      	mov	r3, r0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001320:	b480      	push	{r7}
 8001322:	b08b      	sub	sp, #44	; 0x2c
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001332:	e169      	b.n	8001608 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001334:	2201      	movs	r2, #1
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	429a      	cmp	r2, r3
 800134e:	f040 8158 	bne.w	8001602 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4a9a      	ldr	r2, [pc, #616]	; (80015c0 <HAL_GPIO_Init+0x2a0>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d05e      	beq.n	800141a <HAL_GPIO_Init+0xfa>
 800135c:	4a98      	ldr	r2, [pc, #608]	; (80015c0 <HAL_GPIO_Init+0x2a0>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d875      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 8001362:	4a98      	ldr	r2, [pc, #608]	; (80015c4 <HAL_GPIO_Init+0x2a4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d058      	beq.n	800141a <HAL_GPIO_Init+0xfa>
 8001368:	4a96      	ldr	r2, [pc, #600]	; (80015c4 <HAL_GPIO_Init+0x2a4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d86f      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 800136e:	4a96      	ldr	r2, [pc, #600]	; (80015c8 <HAL_GPIO_Init+0x2a8>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d052      	beq.n	800141a <HAL_GPIO_Init+0xfa>
 8001374:	4a94      	ldr	r2, [pc, #592]	; (80015c8 <HAL_GPIO_Init+0x2a8>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d869      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 800137a:	4a94      	ldr	r2, [pc, #592]	; (80015cc <HAL_GPIO_Init+0x2ac>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d04c      	beq.n	800141a <HAL_GPIO_Init+0xfa>
 8001380:	4a92      	ldr	r2, [pc, #584]	; (80015cc <HAL_GPIO_Init+0x2ac>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d863      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 8001386:	4a92      	ldr	r2, [pc, #584]	; (80015d0 <HAL_GPIO_Init+0x2b0>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d046      	beq.n	800141a <HAL_GPIO_Init+0xfa>
 800138c:	4a90      	ldr	r2, [pc, #576]	; (80015d0 <HAL_GPIO_Init+0x2b0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d85d      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 8001392:	2b12      	cmp	r3, #18
 8001394:	d82a      	bhi.n	80013ec <HAL_GPIO_Init+0xcc>
 8001396:	2b12      	cmp	r3, #18
 8001398:	d859      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 800139a:	a201      	add	r2, pc, #4	; (adr r2, 80013a0 <HAL_GPIO_Init+0x80>)
 800139c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a0:	0800141b 	.word	0x0800141b
 80013a4:	080013f5 	.word	0x080013f5
 80013a8:	08001407 	.word	0x08001407
 80013ac:	08001449 	.word	0x08001449
 80013b0:	0800144f 	.word	0x0800144f
 80013b4:	0800144f 	.word	0x0800144f
 80013b8:	0800144f 	.word	0x0800144f
 80013bc:	0800144f 	.word	0x0800144f
 80013c0:	0800144f 	.word	0x0800144f
 80013c4:	0800144f 	.word	0x0800144f
 80013c8:	0800144f 	.word	0x0800144f
 80013cc:	0800144f 	.word	0x0800144f
 80013d0:	0800144f 	.word	0x0800144f
 80013d4:	0800144f 	.word	0x0800144f
 80013d8:	0800144f 	.word	0x0800144f
 80013dc:	0800144f 	.word	0x0800144f
 80013e0:	0800144f 	.word	0x0800144f
 80013e4:	080013fd 	.word	0x080013fd
 80013e8:	08001411 	.word	0x08001411
 80013ec:	4a79      	ldr	r2, [pc, #484]	; (80015d4 <HAL_GPIO_Init+0x2b4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d013      	beq.n	800141a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013f2:	e02c      	b.n	800144e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	623b      	str	r3, [r7, #32]
          break;
 80013fa:	e029      	b.n	8001450 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	3304      	adds	r3, #4
 8001402:	623b      	str	r3, [r7, #32]
          break;
 8001404:	e024      	b.n	8001450 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	3308      	adds	r3, #8
 800140c:	623b      	str	r3, [r7, #32]
          break;
 800140e:	e01f      	b.n	8001450 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	330c      	adds	r3, #12
 8001416:	623b      	str	r3, [r7, #32]
          break;
 8001418:	e01a      	b.n	8001450 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d102      	bne.n	8001428 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001422:	2304      	movs	r3, #4
 8001424:	623b      	str	r3, [r7, #32]
          break;
 8001426:	e013      	b.n	8001450 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d105      	bne.n	800143c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001430:	2308      	movs	r3, #8
 8001432:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69fa      	ldr	r2, [r7, #28]
 8001438:	611a      	str	r2, [r3, #16]
          break;
 800143a:	e009      	b.n	8001450 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800143c:	2308      	movs	r3, #8
 800143e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	615a      	str	r2, [r3, #20]
          break;
 8001446:	e003      	b.n	8001450 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001448:	2300      	movs	r3, #0
 800144a:	623b      	str	r3, [r7, #32]
          break;
 800144c:	e000      	b.n	8001450 <HAL_GPIO_Init+0x130>
          break;
 800144e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2bff      	cmp	r3, #255	; 0xff
 8001454:	d801      	bhi.n	800145a <HAL_GPIO_Init+0x13a>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	e001      	b.n	800145e <HAL_GPIO_Init+0x13e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3304      	adds	r3, #4
 800145e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	2bff      	cmp	r3, #255	; 0xff
 8001464:	d802      	bhi.n	800146c <HAL_GPIO_Init+0x14c>
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	e002      	b.n	8001472 <HAL_GPIO_Init+0x152>
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	3b08      	subs	r3, #8
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	210f      	movs	r1, #15
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	401a      	ands	r2, r3
 8001484:	6a39      	ldr	r1, [r7, #32]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	431a      	orrs	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 80b1 	beq.w	8001602 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014a0:	4b4d      	ldr	r3, [pc, #308]	; (80015d8 <HAL_GPIO_Init+0x2b8>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a4c      	ldr	r2, [pc, #304]	; (80015d8 <HAL_GPIO_Init+0x2b8>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b4a      	ldr	r3, [pc, #296]	; (80015d8 <HAL_GPIO_Init+0x2b8>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014b8:	4a48      	ldr	r2, [pc, #288]	; (80015dc <HAL_GPIO_Init+0x2bc>)
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	3302      	adds	r3, #2
 80014c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	220f      	movs	r2, #15
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	4013      	ands	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a40      	ldr	r2, [pc, #256]	; (80015e0 <HAL_GPIO_Init+0x2c0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d013      	beq.n	800150c <HAL_GPIO_Init+0x1ec>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a3f      	ldr	r2, [pc, #252]	; (80015e4 <HAL_GPIO_Init+0x2c4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d00d      	beq.n	8001508 <HAL_GPIO_Init+0x1e8>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a3e      	ldr	r2, [pc, #248]	; (80015e8 <HAL_GPIO_Init+0x2c8>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d007      	beq.n	8001504 <HAL_GPIO_Init+0x1e4>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a3d      	ldr	r2, [pc, #244]	; (80015ec <HAL_GPIO_Init+0x2cc>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d101      	bne.n	8001500 <HAL_GPIO_Init+0x1e0>
 80014fc:	2303      	movs	r3, #3
 80014fe:	e006      	b.n	800150e <HAL_GPIO_Init+0x1ee>
 8001500:	2304      	movs	r3, #4
 8001502:	e004      	b.n	800150e <HAL_GPIO_Init+0x1ee>
 8001504:	2302      	movs	r3, #2
 8001506:	e002      	b.n	800150e <HAL_GPIO_Init+0x1ee>
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <HAL_GPIO_Init+0x1ee>
 800150c:	2300      	movs	r3, #0
 800150e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001510:	f002 0203 	and.w	r2, r2, #3
 8001514:	0092      	lsls	r2, r2, #2
 8001516:	4093      	lsls	r3, r2
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	4313      	orrs	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800151e:	492f      	ldr	r1, [pc, #188]	; (80015dc <HAL_GPIO_Init+0x2bc>)
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	089b      	lsrs	r3, r3, #2
 8001524:	3302      	adds	r3, #2
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d006      	beq.n	8001546 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001538:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	492c      	ldr	r1, [pc, #176]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	608b      	str	r3, [r1, #8]
 8001544:	e006      	b.n	8001554 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001546:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	43db      	mvns	r3, r3
 800154e:	4928      	ldr	r1, [pc, #160]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 8001550:	4013      	ands	r3, r2
 8001552:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	4922      	ldr	r1, [pc, #136]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	60cb      	str	r3, [r1, #12]
 800156c:	e006      	b.n	800157c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	43db      	mvns	r3, r3
 8001576:	491e      	ldr	r1, [pc, #120]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 8001578:	4013      	ands	r3, r2
 800157a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d006      	beq.n	8001596 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	4918      	ldr	r1, [pc, #96]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001596:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	43db      	mvns	r3, r3
 800159e:	4914      	ldr	r1, [pc, #80]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d021      	beq.n	80015f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	490e      	ldr	r1, [pc, #56]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	600b      	str	r3, [r1, #0]
 80015bc:	e021      	b.n	8001602 <HAL_GPIO_Init+0x2e2>
 80015be:	bf00      	nop
 80015c0:	10320000 	.word	0x10320000
 80015c4:	10310000 	.word	0x10310000
 80015c8:	10220000 	.word	0x10220000
 80015cc:	10210000 	.word	0x10210000
 80015d0:	10120000 	.word	0x10120000
 80015d4:	10110000 	.word	0x10110000
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40010000 	.word	0x40010000
 80015e0:	40010800 	.word	0x40010800
 80015e4:	40010c00 	.word	0x40010c00
 80015e8:	40011000 	.word	0x40011000
 80015ec:	40011400 	.word	0x40011400
 80015f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_GPIO_Init+0x304>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	4909      	ldr	r1, [pc, #36]	; (8001624 <HAL_GPIO_Init+0x304>)
 80015fe:	4013      	ands	r3, r2
 8001600:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	3301      	adds	r3, #1
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	fa22 f303 	lsr.w	r3, r2, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	f47f ae8e 	bne.w	8001334 <HAL_GPIO_Init+0x14>
  }
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	372c      	adds	r7, #44	; 0x2c
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	40010400 	.word	0x40010400

08001628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
 8001634:	4613      	mov	r3, r2
 8001636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001638:	787b      	ldrb	r3, [r7, #1]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001644:	e003      	b.n	800164e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001646:	887b      	ldrh	r3, [r7, #2]
 8001648:	041a      	lsls	r2, r3, #16
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	611a      	str	r2, [r3, #16]
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e272      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 8087 	beq.w	8001786 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001678:	4b92      	ldr	r3, [pc, #584]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 030c 	and.w	r3, r3, #12
 8001680:	2b04      	cmp	r3, #4
 8001682:	d00c      	beq.n	800169e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001684:	4b8f      	ldr	r3, [pc, #572]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	2b08      	cmp	r3, #8
 800168e:	d112      	bne.n	80016b6 <HAL_RCC_OscConfig+0x5e>
 8001690:	4b8c      	ldr	r3, [pc, #560]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800169c:	d10b      	bne.n	80016b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169e:	4b89      	ldr	r3, [pc, #548]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d06c      	beq.n	8001784 <HAL_RCC_OscConfig+0x12c>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d168      	bne.n	8001784 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e24c      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016be:	d106      	bne.n	80016ce <HAL_RCC_OscConfig+0x76>
 80016c0:	4b80      	ldr	r3, [pc, #512]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a7f      	ldr	r2, [pc, #508]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	e02e      	b.n	800172c <HAL_RCC_OscConfig+0xd4>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10c      	bne.n	80016f0 <HAL_RCC_OscConfig+0x98>
 80016d6:	4b7b      	ldr	r3, [pc, #492]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a7a      	ldr	r2, [pc, #488]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	4b78      	ldr	r3, [pc, #480]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a77      	ldr	r2, [pc, #476]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	e01d      	b.n	800172c <HAL_RCC_OscConfig+0xd4>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016f8:	d10c      	bne.n	8001714 <HAL_RCC_OscConfig+0xbc>
 80016fa:	4b72      	ldr	r3, [pc, #456]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a71      	ldr	r2, [pc, #452]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	4b6f      	ldr	r3, [pc, #444]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a6e      	ldr	r2, [pc, #440]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 800170c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	e00b      	b.n	800172c <HAL_RCC_OscConfig+0xd4>
 8001714:	4b6b      	ldr	r3, [pc, #428]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a6a      	ldr	r2, [pc, #424]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 800171a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b68      	ldr	r3, [pc, #416]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a67      	ldr	r2, [pc, #412]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800172a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d013      	beq.n	800175c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff faa6 	bl	8000c84 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800173c:	f7ff faa2 	bl	8000c84 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b64      	cmp	r3, #100	; 0x64
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e200      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174e:	4b5d      	ldr	r3, [pc, #372]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f0      	beq.n	800173c <HAL_RCC_OscConfig+0xe4>
 800175a:	e014      	b.n	8001786 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7ff fa92 	bl	8000c84 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001764:	f7ff fa8e 	bl	8000c84 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b64      	cmp	r3, #100	; 0x64
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e1ec      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001776:	4b53      	ldr	r3, [pc, #332]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x10c>
 8001782:	e000      	b.n	8001786 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d063      	beq.n	800185a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001792:	4b4c      	ldr	r3, [pc, #304]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00b      	beq.n	80017b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800179e:	4b49      	ldr	r3, [pc, #292]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b08      	cmp	r3, #8
 80017a8:	d11c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x18c>
 80017aa:	4b46      	ldr	r3, [pc, #280]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d116      	bne.n	80017e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b6:	4b43      	ldr	r3, [pc, #268]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d005      	beq.n	80017ce <HAL_RCC_OscConfig+0x176>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d001      	beq.n	80017ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e1c0      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ce:	4b3d      	ldr	r3, [pc, #244]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	4939      	ldr	r1, [pc, #228]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e2:	e03a      	b.n	800185a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d020      	beq.n	800182e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ec:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f2:	f7ff fa47 	bl	8000c84 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017fa:	f7ff fa43 	bl	8000c84 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e1a1      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180c:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0f0      	beq.n	80017fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001818:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	4927      	ldr	r1, [pc, #156]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001828:	4313      	orrs	r3, r2
 800182a:	600b      	str	r3, [r1, #0]
 800182c:	e015      	b.n	800185a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800182e:	4b26      	ldr	r3, [pc, #152]	; (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff fa26 	bl	8000c84 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800183c:	f7ff fa22 	bl	8000c84 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e180      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d03a      	beq.n	80018dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d019      	beq.n	80018a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800186e:	4b17      	ldr	r3, [pc, #92]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 8001870:	2201      	movs	r2, #1
 8001872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001874:	f7ff fa06 	bl	8000c84 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800187c:	f7ff fa02 	bl	8000c84 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e160      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188e:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800189a:	2001      	movs	r0, #1
 800189c:	f000 face 	bl	8001e3c <RCC_Delay>
 80018a0:	e01c      	b.n	80018dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a8:	f7ff f9ec 	bl	8000c84 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ae:	e00f      	b.n	80018d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b0:	f7ff f9e8 	bl	8000c84 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d908      	bls.n	80018d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e146      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000
 80018c8:	42420000 	.word	0x42420000
 80018cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d0:	4b92      	ldr	r3, [pc, #584]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1e9      	bne.n	80018b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80a6 	beq.w	8001a36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ee:	4b8b      	ldr	r3, [pc, #556]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10d      	bne.n	8001916 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	4b88      	ldr	r3, [pc, #544]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	4a87      	ldr	r2, [pc, #540]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	61d3      	str	r3, [r2, #28]
 8001906:	4b85      	ldr	r3, [pc, #532]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001912:	2301      	movs	r3, #1
 8001914:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001916:	4b82      	ldr	r3, [pc, #520]	; (8001b20 <HAL_RCC_OscConfig+0x4c8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191e:	2b00      	cmp	r3, #0
 8001920:	d118      	bne.n	8001954 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001922:	4b7f      	ldr	r3, [pc, #508]	; (8001b20 <HAL_RCC_OscConfig+0x4c8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a7e      	ldr	r2, [pc, #504]	; (8001b20 <HAL_RCC_OscConfig+0x4c8>)
 8001928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800192e:	f7ff f9a9 	bl	8000c84 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001936:	f7ff f9a5 	bl	8000c84 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b64      	cmp	r3, #100	; 0x64
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e103      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001948:	4b75      	ldr	r3, [pc, #468]	; (8001b20 <HAL_RCC_OscConfig+0x4c8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d106      	bne.n	800196a <HAL_RCC_OscConfig+0x312>
 800195c:	4b6f      	ldr	r3, [pc, #444]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	4a6e      	ldr	r2, [pc, #440]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6213      	str	r3, [r2, #32]
 8001968:	e02d      	b.n	80019c6 <HAL_RCC_OscConfig+0x36e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10c      	bne.n	800198c <HAL_RCC_OscConfig+0x334>
 8001972:	4b6a      	ldr	r3, [pc, #424]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	4a69      	ldr	r2, [pc, #420]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001978:	f023 0301 	bic.w	r3, r3, #1
 800197c:	6213      	str	r3, [r2, #32]
 800197e:	4b67      	ldr	r3, [pc, #412]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	4a66      	ldr	r2, [pc, #408]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001984:	f023 0304 	bic.w	r3, r3, #4
 8001988:	6213      	str	r3, [r2, #32]
 800198a:	e01c      	b.n	80019c6 <HAL_RCC_OscConfig+0x36e>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2b05      	cmp	r3, #5
 8001992:	d10c      	bne.n	80019ae <HAL_RCC_OscConfig+0x356>
 8001994:	4b61      	ldr	r3, [pc, #388]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	4a60      	ldr	r2, [pc, #384]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 800199a:	f043 0304 	orr.w	r3, r3, #4
 800199e:	6213      	str	r3, [r2, #32]
 80019a0:	4b5e      	ldr	r3, [pc, #376]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	4a5d      	ldr	r2, [pc, #372]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6213      	str	r3, [r2, #32]
 80019ac:	e00b      	b.n	80019c6 <HAL_RCC_OscConfig+0x36e>
 80019ae:	4b5b      	ldr	r3, [pc, #364]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	4a5a      	ldr	r2, [pc, #360]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	f023 0301 	bic.w	r3, r3, #1
 80019b8:	6213      	str	r3, [r2, #32]
 80019ba:	4b58      	ldr	r3, [pc, #352]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	4a57      	ldr	r2, [pc, #348]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80019c0:	f023 0304 	bic.w	r3, r3, #4
 80019c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d015      	beq.n	80019fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ce:	f7ff f959 	bl	8000c84 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d4:	e00a      	b.n	80019ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d6:	f7ff f955 	bl	8000c84 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e0b1      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ec:	4b4b      	ldr	r3, [pc, #300]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0ee      	beq.n	80019d6 <HAL_RCC_OscConfig+0x37e>
 80019f8:	e014      	b.n	8001a24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fa:	f7ff f943 	bl	8000c84 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a00:	e00a      	b.n	8001a18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a02:	f7ff f93f 	bl	8000c84 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e09b      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a18:	4b40      	ldr	r3, [pc, #256]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1ee      	bne.n	8001a02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d105      	bne.n	8001a36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a2a:	4b3c      	ldr	r3, [pc, #240]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	4a3b      	ldr	r2, [pc, #236]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 8087 	beq.w	8001b4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a40:	4b36      	ldr	r3, [pc, #216]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 030c 	and.w	r3, r3, #12
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	d061      	beq.n	8001b10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d146      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a54:	4b33      	ldr	r3, [pc, #204]	; (8001b24 <HAL_RCC_OscConfig+0x4cc>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5a:	f7ff f913 	bl	8000c84 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a62:	f7ff f90f 	bl	8000c84 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e06d      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a74:	4b29      	ldr	r3, [pc, #164]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f0      	bne.n	8001a62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a88:	d108      	bne.n	8001a9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a8a:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	4921      	ldr	r1, [pc, #132]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a9c:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a19      	ldr	r1, [r3, #32]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	430b      	orrs	r3, r1
 8001aae:	491b      	ldr	r1, [pc, #108]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <HAL_RCC_OscConfig+0x4cc>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aba:	f7ff f8e3 	bl	8000c84 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac2:	f7ff f8df 	bl	8000c84 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e03d      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x46a>
 8001ae0:	e035      	b.n	8001b4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <HAL_RCC_OscConfig+0x4cc>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff f8cc 	bl	8000c84 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af0:	f7ff f8c8 	bl	8000c84 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e026      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x498>
 8001b0e:	e01e      	b.n	8001b4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d107      	bne.n	8001b28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e019      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40007000 	.word	0x40007000
 8001b24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_RCC_OscConfig+0x500>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d106      	bne.n	8001b4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d001      	beq.n	8001b4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40021000 	.word	0x40021000

08001b5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0d0      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b70:	4b6a      	ldr	r3, [pc, #424]	; (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d910      	bls.n	8001ba0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b67      	ldr	r3, [pc, #412]	; (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 0207 	bic.w	r2, r3, #7
 8001b86:	4965      	ldr	r1, [pc, #404]	; (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b63      	ldr	r3, [pc, #396]	; (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0b8      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d020      	beq.n	8001bee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bb8:	4b59      	ldr	r3, [pc, #356]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	4a58      	ldr	r2, [pc, #352]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bd0:	4b53      	ldr	r3, [pc, #332]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4a52      	ldr	r2, [pc, #328]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bdc:	4b50      	ldr	r3, [pc, #320]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	494d      	ldr	r1, [pc, #308]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d040      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	4b47      	ldr	r3, [pc, #284]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d115      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e07f      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d107      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1a:	4b41      	ldr	r3, [pc, #260]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d109      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e073      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e06b      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c3a:	4b39      	ldr	r3, [pc, #228]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f023 0203 	bic.w	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	4936      	ldr	r1, [pc, #216]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c4c:	f7ff f81a 	bl	8000c84 <HAL_GetTick>
 8001c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c52:	e00a      	b.n	8001c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c54:	f7ff f816 	bl	8000c84 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e053      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 020c 	and.w	r2, r3, #12
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d1eb      	bne.n	8001c54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c7c:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d210      	bcs.n	8001cac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 0207 	bic.w	r2, r3, #7
 8001c92:	4922      	ldr	r1, [pc, #136]	; (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9a:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e032      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb8:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	4916      	ldr	r1, [pc, #88]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d009      	beq.n	8001cea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	490e      	ldr	r1, [pc, #56]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cea:	f000 f821 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	490a      	ldr	r1, [pc, #40]	; (8001d24 <HAL_RCC_ClockConfig+0x1c8>)
 8001cfc:	5ccb      	ldrb	r3, [r1, r3]
 8001cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001d02:	4a09      	ldr	r2, [pc, #36]	; (8001d28 <HAL_RCC_ClockConfig+0x1cc>)
 8001d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_RCC_ClockConfig+0x1d0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe ff78 	bl	8000c00 <HAL_InitTick>

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40022000 	.word	0x40022000
 8001d20:	40021000 	.word	0x40021000
 8001d24:	08003718 	.word	0x08003718
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	20000004 	.word	0x20000004

08001d30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	2300      	movs	r3, #0
 8001d44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d4a:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d002      	beq.n	8001d60 <HAL_RCC_GetSysClockFreq+0x30>
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d003      	beq.n	8001d66 <HAL_RCC_GetSysClockFreq+0x36>
 8001d5e:	e027      	b.n	8001db0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d62:	613b      	str	r3, [r7, #16]
      break;
 8001d64:	e027      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	0c9b      	lsrs	r3, r3, #18
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	4a17      	ldr	r2, [pc, #92]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d70:	5cd3      	ldrb	r3, [r2, r3]
 8001d72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d010      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	0c5b      	lsrs	r3, r3, #17
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	4a11      	ldr	r2, [pc, #68]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d8a:	5cd3      	ldrb	r3, [r2, r3]
 8001d8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a0d      	ldr	r2, [pc, #52]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d92:	fb03 f202 	mul.w	r2, r3, r2
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	e004      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a0c      	ldr	r2, [pc, #48]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001da4:	fb02 f303 	mul.w	r3, r2, r3
 8001da8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	613b      	str	r3, [r7, #16]
      break;
 8001dae:	e002      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001db2:	613b      	str	r3, [r7, #16]
      break;
 8001db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001db6:	693b      	ldr	r3, [r7, #16]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	371c      	adds	r7, #28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	007a1200 	.word	0x007a1200
 8001dcc:	08003730 	.word	0x08003730
 8001dd0:	08003740 	.word	0x08003740
 8001dd4:	003d0900 	.word	0x003d0900

08001dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ddc:	4b02      	ldr	r3, [pc, #8]	; (8001de8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	20000000 	.word	0x20000000

08001dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001df0:	f7ff fff2 	bl	8001dd8 <HAL_RCC_GetHCLKFreq>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	0a1b      	lsrs	r3, r3, #8
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	4903      	ldr	r1, [pc, #12]	; (8001e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e02:	5ccb      	ldrb	r3, [r1, r3]
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	08003728 	.word	0x08003728

08001e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e18:	f7ff ffde 	bl	8001dd8 <HAL_RCC_GetHCLKFreq>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	0adb      	lsrs	r3, r3, #11
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	4903      	ldr	r1, [pc, #12]	; (8001e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e2a:	5ccb      	ldrb	r3, [r1, r3]
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40021000 	.word	0x40021000
 8001e38:	08003728 	.word	0x08003728

08001e3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e44:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <RCC_Delay+0x34>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <RCC_Delay+0x38>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	0a5b      	lsrs	r3, r3, #9
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e58:	bf00      	nop
  }
  while (Delay --);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1e5a      	subs	r2, r3, #1
 8001e5e:	60fa      	str	r2, [r7, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f9      	bne.n	8001e58 <RCC_Delay+0x1c>
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	20000000 	.word	0x20000000
 8001e74:	10624dd3 	.word	0x10624dd3

08001e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d07d      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001e94:	2300      	movs	r3, #0
 8001e96:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e98:	4b4f      	ldr	r3, [pc, #316]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10d      	bne.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea4:	4b4c      	ldr	r3, [pc, #304]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	4a4b      	ldr	r2, [pc, #300]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eae:	61d3      	str	r3, [r2, #28]
 8001eb0:	4b49      	ldr	r3, [pc, #292]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec0:	4b46      	ldr	r3, [pc, #280]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d118      	bne.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ecc:	4b43      	ldr	r3, [pc, #268]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a42      	ldr	r2, [pc, #264]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed8:	f7fe fed4 	bl	8000c84 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ede:	e008      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee0:	f7fe fed0 	bl	8000c84 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e06d      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef2:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001efe:	4b36      	ldr	r3, [pc, #216]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f06:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d02e      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d027      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f1c:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f24:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f26:	4b2e      	ldr	r3, [pc, #184]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f2c:	4b2c      	ldr	r3, [pc, #176]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f32:	4a29      	ldr	r2, [pc, #164]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d014      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f42:	f7fe fe9f 	bl	8000c84 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7fe fe9b 	bl	8000c84 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e036      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f60:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0ee      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f6c:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4917      	ldr	r1, [pc, #92]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f7e:	7dfb      	ldrb	r3, [r7, #23]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d105      	bne.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f84:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	4a13      	ldr	r2, [pc, #76]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d008      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f9c:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	490b      	ldr	r1, [pc, #44]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d008      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fba:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	4904      	ldr	r1, [pc, #16]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40007000 	.word	0x40007000
 8001fe0:	42420440 	.word	0x42420440

08001fe4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e076      	b.n	80020e4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d108      	bne.n	8002010 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002006:	d009      	beq.n	800201c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	61da      	str	r2, [r3, #28]
 800200e:	e005      	b.n	800201c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d106      	bne.n	800203c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7fe fc08 	bl	800084c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2202      	movs	r2, #2
 8002040:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002052:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a0:	ea42 0103 	orr.w	r1, r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	0c1a      	lsrs	r2, r3, #16
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f002 0204 	and.w	r2, r2, #4
 80020c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	69da      	ldr	r2, [r3, #28]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d001      	beq.n	8002104 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e032      	b.n	800216a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2202      	movs	r2, #2
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a18      	ldr	r2, [pc, #96]	; (8002174 <HAL_TIM_Base_Start+0x88>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d00e      	beq.n	8002134 <HAL_TIM_Base_Start+0x48>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211e:	d009      	beq.n	8002134 <HAL_TIM_Base_Start+0x48>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a14      	ldr	r2, [pc, #80]	; (8002178 <HAL_TIM_Base_Start+0x8c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d004      	beq.n	8002134 <HAL_TIM_Base_Start+0x48>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a13      	ldr	r2, [pc, #76]	; (800217c <HAL_TIM_Base_Start+0x90>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d111      	bne.n	8002158 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b06      	cmp	r3, #6
 8002144:	d010      	beq.n	8002168 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f042 0201 	orr.w	r2, r2, #1
 8002154:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002156:	e007      	b.n	8002168 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0201 	orr.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	40012c00 	.word	0x40012c00
 8002178:	40000400 	.word	0x40000400
 800217c:	40000800 	.word	0x40000800

08002180 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e041      	b.n	8002216 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7fe fb9a 	bl	80008e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3304      	adds	r3, #4
 80021bc:	4619      	mov	r1, r3
 80021be:	4610      	mov	r0, r2
 80021c0:	f000 f8f0 	bl	80023a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800223a:	2302      	movs	r3, #2
 800223c:	e0ae      	b.n	800239c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b0c      	cmp	r3, #12
 800224a:	f200 809f 	bhi.w	800238c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800224e:	a201      	add	r2, pc, #4	; (adr r2, 8002254 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002254:	08002289 	.word	0x08002289
 8002258:	0800238d 	.word	0x0800238d
 800225c:	0800238d 	.word	0x0800238d
 8002260:	0800238d 	.word	0x0800238d
 8002264:	080022c9 	.word	0x080022c9
 8002268:	0800238d 	.word	0x0800238d
 800226c:	0800238d 	.word	0x0800238d
 8002270:	0800238d 	.word	0x0800238d
 8002274:	0800230b 	.word	0x0800230b
 8002278:	0800238d 	.word	0x0800238d
 800227c:	0800238d 	.word	0x0800238d
 8002280:	0800238d 	.word	0x0800238d
 8002284:	0800234b 	.word	0x0800234b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	4618      	mov	r0, r3
 8002290:	f000 f8ea 	bl	8002468 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699a      	ldr	r2, [r3, #24]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0208 	orr.w	r2, r2, #8
 80022a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699a      	ldr	r2, [r3, #24]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0204 	bic.w	r2, r2, #4
 80022b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6999      	ldr	r1, [r3, #24]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	619a      	str	r2, [r3, #24]
      break;
 80022c6:	e064      	b.n	8002392 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f930 	bl	8002534 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699a      	ldr	r2, [r3, #24]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699a      	ldr	r2, [r3, #24]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6999      	ldr	r1, [r3, #24]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	021a      	lsls	r2, r3, #8
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	619a      	str	r2, [r3, #24]
      break;
 8002308:	e043      	b.n	8002392 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68b9      	ldr	r1, [r7, #8]
 8002310:	4618      	mov	r0, r3
 8002312:	f000 f979 	bl	8002608 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	69da      	ldr	r2, [r3, #28]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f042 0208 	orr.w	r2, r2, #8
 8002324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	69da      	ldr	r2, [r3, #28]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0204 	bic.w	r2, r2, #4
 8002334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	69d9      	ldr	r1, [r3, #28]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	61da      	str	r2, [r3, #28]
      break;
 8002348:	e023      	b.n	8002392 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68b9      	ldr	r1, [r7, #8]
 8002350:	4618      	mov	r0, r3
 8002352:	f000 f9c3 	bl	80026dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	69da      	ldr	r2, [r3, #28]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002364:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	69da      	ldr	r2, [r3, #28]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	69d9      	ldr	r1, [r3, #28]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	021a      	lsls	r2, r3, #8
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	61da      	str	r2, [r3, #28]
      break;
 800238a:	e002      	b.n	8002392 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	75fb      	strb	r3, [r7, #23]
      break;
 8002390:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800239a:	7dfb      	ldrb	r3, [r7, #23]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a29      	ldr	r2, [pc, #164]	; (800245c <TIM_Base_SetConfig+0xb8>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d00b      	beq.n	80023d4 <TIM_Base_SetConfig+0x30>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c2:	d007      	beq.n	80023d4 <TIM_Base_SetConfig+0x30>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a26      	ldr	r2, [pc, #152]	; (8002460 <TIM_Base_SetConfig+0xbc>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d003      	beq.n	80023d4 <TIM_Base_SetConfig+0x30>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a25      	ldr	r2, [pc, #148]	; (8002464 <TIM_Base_SetConfig+0xc0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d108      	bne.n	80023e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a1c      	ldr	r2, [pc, #112]	; (800245c <TIM_Base_SetConfig+0xb8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00b      	beq.n	8002406 <TIM_Base_SetConfig+0x62>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f4:	d007      	beq.n	8002406 <TIM_Base_SetConfig+0x62>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a19      	ldr	r2, [pc, #100]	; (8002460 <TIM_Base_SetConfig+0xbc>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d003      	beq.n	8002406 <TIM_Base_SetConfig+0x62>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a18      	ldr	r2, [pc, #96]	; (8002464 <TIM_Base_SetConfig+0xc0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d108      	bne.n	8002418 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800240c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4313      	orrs	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	4313      	orrs	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a07      	ldr	r2, [pc, #28]	; (800245c <TIM_Base_SetConfig+0xb8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d103      	bne.n	800244c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	615a      	str	r2, [r3, #20]
}
 8002452:	bf00      	nop
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr
 800245c:	40012c00 	.word	0x40012c00
 8002460:	40000400 	.word	0x40000400
 8002464:	40000800 	.word	0x40000800

08002468 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f023 0201 	bic.w	r2, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f023 0303 	bic.w	r3, r3, #3
 800249e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f023 0302 	bic.w	r3, r3, #2
 80024b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a1c      	ldr	r2, [pc, #112]	; (8002530 <TIM_OC1_SetConfig+0xc8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d10c      	bne.n	80024de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f023 0308 	bic.w	r3, r3, #8
 80024ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f023 0304 	bic.w	r3, r3, #4
 80024dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a13      	ldr	r2, [pc, #76]	; (8002530 <TIM_OC1_SetConfig+0xc8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d111      	bne.n	800250a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	621a      	str	r2, [r3, #32]
}
 8002524:	bf00      	nop
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40012c00 	.word	0x40012c00

08002534 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002534:	b480      	push	{r7}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f023 0210 	bic.w	r2, r3, #16
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800256a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	021b      	lsls	r3, r3, #8
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f023 0320 	bic.w	r3, r3, #32
 800257e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4313      	orrs	r3, r2
 800258a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a1d      	ldr	r2, [pc, #116]	; (8002604 <TIM_OC2_SetConfig+0xd0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d10d      	bne.n	80025b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800259a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a14      	ldr	r2, [pc, #80]	; (8002604 <TIM_OC2_SetConfig+0xd0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d113      	bne.n	80025e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	621a      	str	r2, [r3, #32]
}
 80025fa:	bf00      	nop
 80025fc:	371c      	adds	r7, #28
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	40012c00 	.word	0x40012c00

08002608 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f023 0303 	bic.w	r3, r3, #3
 800263e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	021b      	lsls	r3, r3, #8
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	4313      	orrs	r3, r2
 800265c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a1d      	ldr	r2, [pc, #116]	; (80026d8 <TIM_OC3_SetConfig+0xd0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d10d      	bne.n	8002682 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800266c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	021b      	lsls	r3, r3, #8
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	4313      	orrs	r3, r2
 8002678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <TIM_OC3_SetConfig+0xd0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d113      	bne.n	80026b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	621a      	str	r2, [r3, #32]
}
 80026cc:	bf00      	nop
 80026ce:	371c      	adds	r7, #28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40012c00 	.word	0x40012c00

080026dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800270a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	021b      	lsls	r3, r3, #8
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4313      	orrs	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002726:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	031b      	lsls	r3, r3, #12
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a0f      	ldr	r2, [pc, #60]	; (8002774 <TIM_OC4_SetConfig+0x98>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d109      	bne.n	8002750 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002742:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	019b      	lsls	r3, r3, #6
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4313      	orrs	r3, r2
 800274e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	621a      	str	r2, [r3, #32]
}
 800276a:	bf00      	nop
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	40012c00 	.word	0x40012c00

08002778 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800278c:	2302      	movs	r3, #2
 800278e:	e046      	b.n	800281e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a16      	ldr	r2, [pc, #88]	; (8002828 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d00e      	beq.n	80027f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027dc:	d009      	beq.n	80027f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a12      	ldr	r2, [pc, #72]	; (800282c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d004      	beq.n	80027f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a10      	ldr	r2, [pc, #64]	; (8002830 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d10c      	bne.n	800280c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	4313      	orrs	r3, r2
 8002802:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr
 8002828:	40012c00 	.word	0x40012c00
 800282c:	40000400 	.word	0x40000400
 8002830:	40000800 	.word	0x40000800

08002834 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e042      	b.n	80028cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d106      	bne.n	8002860 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe f8d6 	bl	8000a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2224      	movs	r2, #36	; 0x24
 8002864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002876:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f91d 	bl	8002ab8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800288c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695a      	ldr	r2, [r3, #20]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800289c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2220      	movs	r2, #32
 80028b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08a      	sub	sp, #40	; 0x28
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	4613      	mov	r3, r2
 80028e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	d16d      	bne.n	80029d0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <HAL_UART_Transmit+0x2c>
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e066      	b.n	80029d2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2221      	movs	r2, #33	; 0x21
 800290e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002912:	f7fe f9b7 	bl	8000c84 <HAL_GetTick>
 8002916:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	88fa      	ldrh	r2, [r7, #6]
 800291c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	88fa      	ldrh	r2, [r7, #6]
 8002922:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800292c:	d108      	bne.n	8002940 <HAL_UART_Transmit+0x6c>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d104      	bne.n	8002940 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	e003      	b.n	8002948 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002944:	2300      	movs	r3, #0
 8002946:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002948:	e02a      	b.n	80029a0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2200      	movs	r2, #0
 8002952:	2180      	movs	r1, #128	; 0x80
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f840 	bl	80029da <UART_WaitOnFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e036      	b.n	80029d2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10b      	bne.n	8002982 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	461a      	mov	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002978:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	3302      	adds	r3, #2
 800297e:	61bb      	str	r3, [r7, #24]
 8002980:	e007      	b.n	8002992 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	781a      	ldrb	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	3301      	adds	r3, #1
 8002990:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1cf      	bne.n	800294a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2200      	movs	r2, #0
 80029b2:	2140      	movs	r1, #64	; 0x40
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f810 	bl	80029da <UART_WaitOnFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e006      	b.n	80029d2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e000      	b.n	80029d2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80029d0:	2302      	movs	r3, #2
  }
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3720      	adds	r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b090      	sub	sp, #64	; 0x40
 80029de:	af00      	add	r7, sp, #0
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	4613      	mov	r3, r2
 80029e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ea:	e050      	b.n	8002a8e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029f2:	d04c      	beq.n	8002a8e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d007      	beq.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x30>
 80029fa:	f7fe f943 	bl	8000c84 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d241      	bcs.n	8002a8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	330c      	adds	r3, #12
 8002a10:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a14:	e853 3f00 	ldrex	r3, [r3]
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	330c      	adds	r3, #12
 8002a28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a2a:	637a      	str	r2, [r7, #52]	; 0x34
 8002a2c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a32:	e841 2300 	strex	r3, r2, [r1]
 8002a36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1e5      	bne.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	3314      	adds	r3, #20
 8002a44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	e853 3f00 	ldrex	r3, [r3]
 8002a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f023 0301 	bic.w	r3, r3, #1
 8002a54:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3314      	adds	r3, #20
 8002a5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a5e:	623a      	str	r2, [r7, #32]
 8002a60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a62:	69f9      	ldr	r1, [r7, #28]
 8002a64:	6a3a      	ldr	r2, [r7, #32]
 8002a66:	e841 2300 	strex	r3, r2, [r1]
 8002a6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1e5      	bne.n	8002a3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e00f      	b.n	8002aae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4013      	ands	r3, r2
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	bf0c      	ite	eq
 8002a9e:	2301      	moveq	r3, #1
 8002aa0:	2300      	movne	r3, #0
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d09f      	beq.n	80029ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3740      	adds	r7, #64	; 0x40
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002af2:	f023 030c 	bic.w	r3, r3, #12
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	430b      	orrs	r3, r1
 8002afe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2c      	ldr	r2, [pc, #176]	; (8002bcc <UART_SetConfig+0x114>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d103      	bne.n	8002b28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b20:	f7ff f978 	bl	8001e14 <HAL_RCC_GetPCLK2Freq>
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	e002      	b.n	8002b2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b28:	f7ff f960 	bl	8001dec <HAL_RCC_GetPCLK1Freq>
 8002b2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	009a      	lsls	r2, r3, #2
 8002b38:	441a      	add	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b44:	4a22      	ldr	r2, [pc, #136]	; (8002bd0 <UART_SetConfig+0x118>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	0119      	lsls	r1, r3, #4
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	009a      	lsls	r2, r3, #2
 8002b58:	441a      	add	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b64:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <UART_SetConfig+0x118>)
 8002b66:	fba3 0302 	umull	r0, r3, r3, r2
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	2064      	movs	r0, #100	; 0x64
 8002b6e:	fb00 f303 	mul.w	r3, r0, r3
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	3332      	adds	r3, #50	; 0x32
 8002b78:	4a15      	ldr	r2, [pc, #84]	; (8002bd0 <UART_SetConfig+0x118>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b84:	4419      	add	r1, r3
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009a      	lsls	r2, r3, #2
 8002b90:	441a      	add	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <UART_SetConfig+0x118>)
 8002b9e:	fba3 0302 	umull	r0, r3, r3, r2
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	2064      	movs	r0, #100	; 0x64
 8002ba6:	fb00 f303 	mul.w	r3, r0, r3
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	3332      	adds	r3, #50	; 0x32
 8002bb0:	4a07      	ldr	r2, [pc, #28]	; (8002bd0 <UART_SetConfig+0x118>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	f003 020f 	and.w	r2, r3, #15
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	440a      	add	r2, r1
 8002bc2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002bc4:	bf00      	nop
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40013800 	.word	0x40013800
 8002bd0:	51eb851f 	.word	0x51eb851f

08002bd4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002bd8:	4904      	ldr	r1, [pc, #16]	; (8002bec <MX_FATFS_Init+0x18>)
 8002bda:	4805      	ldr	r0, [pc, #20]	; (8002bf0 <MX_FATFS_Init+0x1c>)
 8002bdc:	f000 f8a6 	bl	8002d2c <FATFS_LinkDriver>
 8002be0:	4603      	mov	r3, r0
 8002be2:	461a      	mov	r2, r3
 8002be4:	4b03      	ldr	r3, [pc, #12]	; (8002bf4 <MX_FATFS_Init+0x20>)
 8002be6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002be8:	bf00      	nop
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000328 	.word	0x20000328
 8002bf0:	2000000c 	.word	0x2000000c
 8002bf4:	20000324 	.word	0x20000324

08002bf8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8002c02:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <USER_initialize+0x20>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
    return Stat;
 8002c08:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <USER_initialize+0x20>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	20000009 	.word	0x20000009

08002c1c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8002c26:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <USER_status+0x20>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8002c2c:	4b03      	ldr	r3, [pc, #12]	; (8002c3c <USER_status+0x20>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	20000009 	.word	0x20000009

08002c40 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8002c50:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	4603      	mov	r3, r0
 8002c6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8002c6c:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	603a      	str	r2, [r7, #0]
 8002c82:	71fb      	strb	r3, [r7, #7]
 8002c84:	460b      	mov	r3, r1
 8002c86:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
    return res;
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8002cae:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <FATFS_LinkDriverEx+0x90>)
 8002cb0:	7a5b      	ldrb	r3, [r3, #9]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d831      	bhi.n	8002d1c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <FATFS_LinkDriverEx+0x90>)
 8002cba:	7a5b      	ldrb	r3, [r3, #9]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <FATFS_LinkDriverEx+0x90>)
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8002cc6:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <FATFS_LinkDriverEx+0x90>)
 8002cc8:	7a5b      	ldrb	r3, [r3, #9]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	4a16      	ldr	r2, [pc, #88]	; (8002d28 <FATFS_LinkDriverEx+0x90>)
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8002cd6:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <FATFS_LinkDriverEx+0x90>)
 8002cd8:	7a5b      	ldrb	r3, [r3, #9]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <FATFS_LinkDriverEx+0x90>)
 8002ce0:	4413      	add	r3, r2
 8002ce2:	79fa      	ldrb	r2, [r7, #7]
 8002ce4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <FATFS_LinkDriverEx+0x90>)
 8002ce8:	7a5b      	ldrb	r3, [r3, #9]
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	b2d1      	uxtb	r1, r2
 8002cf0:	4a0d      	ldr	r2, [pc, #52]	; (8002d28 <FATFS_LinkDriverEx+0x90>)
 8002cf2:	7251      	strb	r1, [r2, #9]
 8002cf4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8002cf6:	7dbb      	ldrb	r3, [r7, #22]
 8002cf8:	3330      	adds	r3, #48	; 0x30
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	3301      	adds	r3, #1
 8002d04:	223a      	movs	r2, #58	; 0x3a
 8002d06:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	222f      	movs	r2, #47	; 0x2f
 8002d0e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	3303      	adds	r3, #3
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8002d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	371c      	adds	r7, #28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr
 8002d28:	2000032c 	.word	0x2000032c

08002d2c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8002d36:	2200      	movs	r2, #0
 8002d38:	6839      	ldr	r1, [r7, #0]
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff ffac 	bl	8002c98 <FATFS_LinkDriverEx>
 8002d40:	4603      	mov	r3, r0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <_vsniprintf_r>:
 8002d4a:	b530      	push	{r4, r5, lr}
 8002d4c:	4614      	mov	r4, r2
 8002d4e:	2c00      	cmp	r4, #0
 8002d50:	4605      	mov	r5, r0
 8002d52:	461a      	mov	r2, r3
 8002d54:	b09b      	sub	sp, #108	; 0x6c
 8002d56:	da05      	bge.n	8002d64 <_vsniprintf_r+0x1a>
 8002d58:	238b      	movs	r3, #139	; 0x8b
 8002d5a:	6003      	str	r3, [r0, #0]
 8002d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d60:	b01b      	add	sp, #108	; 0x6c
 8002d62:	bd30      	pop	{r4, r5, pc}
 8002d64:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002d68:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002d6c:	bf0c      	ite	eq
 8002d6e:	4623      	moveq	r3, r4
 8002d70:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8002d74:	9302      	str	r3, [sp, #8]
 8002d76:	9305      	str	r3, [sp, #20]
 8002d78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d7c:	9100      	str	r1, [sp, #0]
 8002d7e:	9104      	str	r1, [sp, #16]
 8002d80:	f8ad 300e 	strh.w	r3, [sp, #14]
 8002d84:	4669      	mov	r1, sp
 8002d86:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002d88:	f000 f99a 	bl	80030c0 <_svfiprintf_r>
 8002d8c:	1c43      	adds	r3, r0, #1
 8002d8e:	bfbc      	itt	lt
 8002d90:	238b      	movlt	r3, #139	; 0x8b
 8002d92:	602b      	strlt	r3, [r5, #0]
 8002d94:	2c00      	cmp	r4, #0
 8002d96:	d0e3      	beq.n	8002d60 <_vsniprintf_r+0x16>
 8002d98:	2200      	movs	r2, #0
 8002d9a:	9b00      	ldr	r3, [sp, #0]
 8002d9c:	701a      	strb	r2, [r3, #0]
 8002d9e:	e7df      	b.n	8002d60 <_vsniprintf_r+0x16>

08002da0 <vsniprintf>:
 8002da0:	b507      	push	{r0, r1, r2, lr}
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	460a      	mov	r2, r1
 8002da8:	4601      	mov	r1, r0
 8002daa:	4803      	ldr	r0, [pc, #12]	; (8002db8 <vsniprintf+0x18>)
 8002dac:	6800      	ldr	r0, [r0, #0]
 8002dae:	f7ff ffcc 	bl	8002d4a <_vsniprintf_r>
 8002db2:	b003      	add	sp, #12
 8002db4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002db8:	2000006c 	.word	0x2000006c

08002dbc <memset>:
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	4402      	add	r2, r0
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d100      	bne.n	8002dc6 <memset+0xa>
 8002dc4:	4770      	bx	lr
 8002dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8002dca:	e7f9      	b.n	8002dc0 <memset+0x4>

08002dcc <__errno>:
 8002dcc:	4b01      	ldr	r3, [pc, #4]	; (8002dd4 <__errno+0x8>)
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	2000006c 	.word	0x2000006c

08002dd8 <__libc_init_array>:
 8002dd8:	b570      	push	{r4, r5, r6, lr}
 8002dda:	2600      	movs	r6, #0
 8002ddc:	4d0c      	ldr	r5, [pc, #48]	; (8002e10 <__libc_init_array+0x38>)
 8002dde:	4c0d      	ldr	r4, [pc, #52]	; (8002e14 <__libc_init_array+0x3c>)
 8002de0:	1b64      	subs	r4, r4, r5
 8002de2:	10a4      	asrs	r4, r4, #2
 8002de4:	42a6      	cmp	r6, r4
 8002de6:	d109      	bne.n	8002dfc <__libc_init_array+0x24>
 8002de8:	f000 fc7a 	bl	80036e0 <_init>
 8002dec:	2600      	movs	r6, #0
 8002dee:	4d0a      	ldr	r5, [pc, #40]	; (8002e18 <__libc_init_array+0x40>)
 8002df0:	4c0a      	ldr	r4, [pc, #40]	; (8002e1c <__libc_init_array+0x44>)
 8002df2:	1b64      	subs	r4, r4, r5
 8002df4:	10a4      	asrs	r4, r4, #2
 8002df6:	42a6      	cmp	r6, r4
 8002df8:	d105      	bne.n	8002e06 <__libc_init_array+0x2e>
 8002dfa:	bd70      	pop	{r4, r5, r6, pc}
 8002dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e00:	4798      	blx	r3
 8002e02:	3601      	adds	r6, #1
 8002e04:	e7ee      	b.n	8002de4 <__libc_init_array+0xc>
 8002e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e0a:	4798      	blx	r3
 8002e0c:	3601      	adds	r6, #1
 8002e0e:	e7f2      	b.n	8002df6 <__libc_init_array+0x1e>
 8002e10:	08003778 	.word	0x08003778
 8002e14:	08003778 	.word	0x08003778
 8002e18:	08003778 	.word	0x08003778
 8002e1c:	0800377c 	.word	0x0800377c

08002e20 <__retarget_lock_acquire_recursive>:
 8002e20:	4770      	bx	lr

08002e22 <__retarget_lock_release_recursive>:
 8002e22:	4770      	bx	lr

08002e24 <_free_r>:
 8002e24:	b538      	push	{r3, r4, r5, lr}
 8002e26:	4605      	mov	r5, r0
 8002e28:	2900      	cmp	r1, #0
 8002e2a:	d040      	beq.n	8002eae <_free_r+0x8a>
 8002e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e30:	1f0c      	subs	r4, r1, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	bfb8      	it	lt
 8002e36:	18e4      	addlt	r4, r4, r3
 8002e38:	f000 f8dc 	bl	8002ff4 <__malloc_lock>
 8002e3c:	4a1c      	ldr	r2, [pc, #112]	; (8002eb0 <_free_r+0x8c>)
 8002e3e:	6813      	ldr	r3, [r2, #0]
 8002e40:	b933      	cbnz	r3, 8002e50 <_free_r+0x2c>
 8002e42:	6063      	str	r3, [r4, #4]
 8002e44:	6014      	str	r4, [r2, #0]
 8002e46:	4628      	mov	r0, r5
 8002e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e4c:	f000 b8d8 	b.w	8003000 <__malloc_unlock>
 8002e50:	42a3      	cmp	r3, r4
 8002e52:	d908      	bls.n	8002e66 <_free_r+0x42>
 8002e54:	6820      	ldr	r0, [r4, #0]
 8002e56:	1821      	adds	r1, r4, r0
 8002e58:	428b      	cmp	r3, r1
 8002e5a:	bf01      	itttt	eq
 8002e5c:	6819      	ldreq	r1, [r3, #0]
 8002e5e:	685b      	ldreq	r3, [r3, #4]
 8002e60:	1809      	addeq	r1, r1, r0
 8002e62:	6021      	streq	r1, [r4, #0]
 8002e64:	e7ed      	b.n	8002e42 <_free_r+0x1e>
 8002e66:	461a      	mov	r2, r3
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	b10b      	cbz	r3, 8002e70 <_free_r+0x4c>
 8002e6c:	42a3      	cmp	r3, r4
 8002e6e:	d9fa      	bls.n	8002e66 <_free_r+0x42>
 8002e70:	6811      	ldr	r1, [r2, #0]
 8002e72:	1850      	adds	r0, r2, r1
 8002e74:	42a0      	cmp	r0, r4
 8002e76:	d10b      	bne.n	8002e90 <_free_r+0x6c>
 8002e78:	6820      	ldr	r0, [r4, #0]
 8002e7a:	4401      	add	r1, r0
 8002e7c:	1850      	adds	r0, r2, r1
 8002e7e:	4283      	cmp	r3, r0
 8002e80:	6011      	str	r1, [r2, #0]
 8002e82:	d1e0      	bne.n	8002e46 <_free_r+0x22>
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	4408      	add	r0, r1
 8002e8a:	6010      	str	r0, [r2, #0]
 8002e8c:	6053      	str	r3, [r2, #4]
 8002e8e:	e7da      	b.n	8002e46 <_free_r+0x22>
 8002e90:	d902      	bls.n	8002e98 <_free_r+0x74>
 8002e92:	230c      	movs	r3, #12
 8002e94:	602b      	str	r3, [r5, #0]
 8002e96:	e7d6      	b.n	8002e46 <_free_r+0x22>
 8002e98:	6820      	ldr	r0, [r4, #0]
 8002e9a:	1821      	adds	r1, r4, r0
 8002e9c:	428b      	cmp	r3, r1
 8002e9e:	bf01      	itttt	eq
 8002ea0:	6819      	ldreq	r1, [r3, #0]
 8002ea2:	685b      	ldreq	r3, [r3, #4]
 8002ea4:	1809      	addeq	r1, r1, r0
 8002ea6:	6021      	streq	r1, [r4, #0]
 8002ea8:	6063      	str	r3, [r4, #4]
 8002eaa:	6054      	str	r4, [r2, #4]
 8002eac:	e7cb      	b.n	8002e46 <_free_r+0x22>
 8002eae:	bd38      	pop	{r3, r4, r5, pc}
 8002eb0:	20000478 	.word	0x20000478

08002eb4 <sbrk_aligned>:
 8002eb4:	b570      	push	{r4, r5, r6, lr}
 8002eb6:	4e0e      	ldr	r6, [pc, #56]	; (8002ef0 <sbrk_aligned+0x3c>)
 8002eb8:	460c      	mov	r4, r1
 8002eba:	6831      	ldr	r1, [r6, #0]
 8002ebc:	4605      	mov	r5, r0
 8002ebe:	b911      	cbnz	r1, 8002ec6 <sbrk_aligned+0x12>
 8002ec0:	f000 fbaa 	bl	8003618 <_sbrk_r>
 8002ec4:	6030      	str	r0, [r6, #0]
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	4628      	mov	r0, r5
 8002eca:	f000 fba5 	bl	8003618 <_sbrk_r>
 8002ece:	1c43      	adds	r3, r0, #1
 8002ed0:	d00a      	beq.n	8002ee8 <sbrk_aligned+0x34>
 8002ed2:	1cc4      	adds	r4, r0, #3
 8002ed4:	f024 0403 	bic.w	r4, r4, #3
 8002ed8:	42a0      	cmp	r0, r4
 8002eda:	d007      	beq.n	8002eec <sbrk_aligned+0x38>
 8002edc:	1a21      	subs	r1, r4, r0
 8002ede:	4628      	mov	r0, r5
 8002ee0:	f000 fb9a 	bl	8003618 <_sbrk_r>
 8002ee4:	3001      	adds	r0, #1
 8002ee6:	d101      	bne.n	8002eec <sbrk_aligned+0x38>
 8002ee8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002eec:	4620      	mov	r0, r4
 8002eee:	bd70      	pop	{r4, r5, r6, pc}
 8002ef0:	2000047c 	.word	0x2000047c

08002ef4 <_malloc_r>:
 8002ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ef8:	1ccd      	adds	r5, r1, #3
 8002efa:	f025 0503 	bic.w	r5, r5, #3
 8002efe:	3508      	adds	r5, #8
 8002f00:	2d0c      	cmp	r5, #12
 8002f02:	bf38      	it	cc
 8002f04:	250c      	movcc	r5, #12
 8002f06:	2d00      	cmp	r5, #0
 8002f08:	4607      	mov	r7, r0
 8002f0a:	db01      	blt.n	8002f10 <_malloc_r+0x1c>
 8002f0c:	42a9      	cmp	r1, r5
 8002f0e:	d905      	bls.n	8002f1c <_malloc_r+0x28>
 8002f10:	230c      	movs	r3, #12
 8002f12:	2600      	movs	r6, #0
 8002f14:	603b      	str	r3, [r7, #0]
 8002f16:	4630      	mov	r0, r6
 8002f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002ff0 <_malloc_r+0xfc>
 8002f20:	f000 f868 	bl	8002ff4 <__malloc_lock>
 8002f24:	f8d8 3000 	ldr.w	r3, [r8]
 8002f28:	461c      	mov	r4, r3
 8002f2a:	bb5c      	cbnz	r4, 8002f84 <_malloc_r+0x90>
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	4638      	mov	r0, r7
 8002f30:	f7ff ffc0 	bl	8002eb4 <sbrk_aligned>
 8002f34:	1c43      	adds	r3, r0, #1
 8002f36:	4604      	mov	r4, r0
 8002f38:	d155      	bne.n	8002fe6 <_malloc_r+0xf2>
 8002f3a:	f8d8 4000 	ldr.w	r4, [r8]
 8002f3e:	4626      	mov	r6, r4
 8002f40:	2e00      	cmp	r6, #0
 8002f42:	d145      	bne.n	8002fd0 <_malloc_r+0xdc>
 8002f44:	2c00      	cmp	r4, #0
 8002f46:	d048      	beq.n	8002fda <_malloc_r+0xe6>
 8002f48:	6823      	ldr	r3, [r4, #0]
 8002f4a:	4631      	mov	r1, r6
 8002f4c:	4638      	mov	r0, r7
 8002f4e:	eb04 0903 	add.w	r9, r4, r3
 8002f52:	f000 fb61 	bl	8003618 <_sbrk_r>
 8002f56:	4581      	cmp	r9, r0
 8002f58:	d13f      	bne.n	8002fda <_malloc_r+0xe6>
 8002f5a:	6821      	ldr	r1, [r4, #0]
 8002f5c:	4638      	mov	r0, r7
 8002f5e:	1a6d      	subs	r5, r5, r1
 8002f60:	4629      	mov	r1, r5
 8002f62:	f7ff ffa7 	bl	8002eb4 <sbrk_aligned>
 8002f66:	3001      	adds	r0, #1
 8002f68:	d037      	beq.n	8002fda <_malloc_r+0xe6>
 8002f6a:	6823      	ldr	r3, [r4, #0]
 8002f6c:	442b      	add	r3, r5
 8002f6e:	6023      	str	r3, [r4, #0]
 8002f70:	f8d8 3000 	ldr.w	r3, [r8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d038      	beq.n	8002fea <_malloc_r+0xf6>
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	42a2      	cmp	r2, r4
 8002f7c:	d12b      	bne.n	8002fd6 <_malloc_r+0xe2>
 8002f7e:	2200      	movs	r2, #0
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	e00f      	b.n	8002fa4 <_malloc_r+0xb0>
 8002f84:	6822      	ldr	r2, [r4, #0]
 8002f86:	1b52      	subs	r2, r2, r5
 8002f88:	d41f      	bmi.n	8002fca <_malloc_r+0xd6>
 8002f8a:	2a0b      	cmp	r2, #11
 8002f8c:	d917      	bls.n	8002fbe <_malloc_r+0xca>
 8002f8e:	1961      	adds	r1, r4, r5
 8002f90:	42a3      	cmp	r3, r4
 8002f92:	6025      	str	r5, [r4, #0]
 8002f94:	bf18      	it	ne
 8002f96:	6059      	strne	r1, [r3, #4]
 8002f98:	6863      	ldr	r3, [r4, #4]
 8002f9a:	bf08      	it	eq
 8002f9c:	f8c8 1000 	streq.w	r1, [r8]
 8002fa0:	5162      	str	r2, [r4, r5]
 8002fa2:	604b      	str	r3, [r1, #4]
 8002fa4:	4638      	mov	r0, r7
 8002fa6:	f104 060b 	add.w	r6, r4, #11
 8002faa:	f000 f829 	bl	8003000 <__malloc_unlock>
 8002fae:	f026 0607 	bic.w	r6, r6, #7
 8002fb2:	1d23      	adds	r3, r4, #4
 8002fb4:	1af2      	subs	r2, r6, r3
 8002fb6:	d0ae      	beq.n	8002f16 <_malloc_r+0x22>
 8002fb8:	1b9b      	subs	r3, r3, r6
 8002fba:	50a3      	str	r3, [r4, r2]
 8002fbc:	e7ab      	b.n	8002f16 <_malloc_r+0x22>
 8002fbe:	42a3      	cmp	r3, r4
 8002fc0:	6862      	ldr	r2, [r4, #4]
 8002fc2:	d1dd      	bne.n	8002f80 <_malloc_r+0x8c>
 8002fc4:	f8c8 2000 	str.w	r2, [r8]
 8002fc8:	e7ec      	b.n	8002fa4 <_malloc_r+0xb0>
 8002fca:	4623      	mov	r3, r4
 8002fcc:	6864      	ldr	r4, [r4, #4]
 8002fce:	e7ac      	b.n	8002f2a <_malloc_r+0x36>
 8002fd0:	4634      	mov	r4, r6
 8002fd2:	6876      	ldr	r6, [r6, #4]
 8002fd4:	e7b4      	b.n	8002f40 <_malloc_r+0x4c>
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	e7cc      	b.n	8002f74 <_malloc_r+0x80>
 8002fda:	230c      	movs	r3, #12
 8002fdc:	4638      	mov	r0, r7
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	f000 f80e 	bl	8003000 <__malloc_unlock>
 8002fe4:	e797      	b.n	8002f16 <_malloc_r+0x22>
 8002fe6:	6025      	str	r5, [r4, #0]
 8002fe8:	e7dc      	b.n	8002fa4 <_malloc_r+0xb0>
 8002fea:	605b      	str	r3, [r3, #4]
 8002fec:	deff      	udf	#255	; 0xff
 8002fee:	bf00      	nop
 8002ff0:	20000478 	.word	0x20000478

08002ff4 <__malloc_lock>:
 8002ff4:	4801      	ldr	r0, [pc, #4]	; (8002ffc <__malloc_lock+0x8>)
 8002ff6:	f7ff bf13 	b.w	8002e20 <__retarget_lock_acquire_recursive>
 8002ffa:	bf00      	nop
 8002ffc:	20000474 	.word	0x20000474

08003000 <__malloc_unlock>:
 8003000:	4801      	ldr	r0, [pc, #4]	; (8003008 <__malloc_unlock+0x8>)
 8003002:	f7ff bf0e 	b.w	8002e22 <__retarget_lock_release_recursive>
 8003006:	bf00      	nop
 8003008:	20000474 	.word	0x20000474

0800300c <__ssputs_r>:
 800300c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003010:	461f      	mov	r7, r3
 8003012:	688e      	ldr	r6, [r1, #8]
 8003014:	4682      	mov	sl, r0
 8003016:	42be      	cmp	r6, r7
 8003018:	460c      	mov	r4, r1
 800301a:	4690      	mov	r8, r2
 800301c:	680b      	ldr	r3, [r1, #0]
 800301e:	d82c      	bhi.n	800307a <__ssputs_r+0x6e>
 8003020:	898a      	ldrh	r2, [r1, #12]
 8003022:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003026:	d026      	beq.n	8003076 <__ssputs_r+0x6a>
 8003028:	6965      	ldr	r5, [r4, #20]
 800302a:	6909      	ldr	r1, [r1, #16]
 800302c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003030:	eba3 0901 	sub.w	r9, r3, r1
 8003034:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003038:	1c7b      	adds	r3, r7, #1
 800303a:	444b      	add	r3, r9
 800303c:	106d      	asrs	r5, r5, #1
 800303e:	429d      	cmp	r5, r3
 8003040:	bf38      	it	cc
 8003042:	461d      	movcc	r5, r3
 8003044:	0553      	lsls	r3, r2, #21
 8003046:	d527      	bpl.n	8003098 <__ssputs_r+0x8c>
 8003048:	4629      	mov	r1, r5
 800304a:	f7ff ff53 	bl	8002ef4 <_malloc_r>
 800304e:	4606      	mov	r6, r0
 8003050:	b360      	cbz	r0, 80030ac <__ssputs_r+0xa0>
 8003052:	464a      	mov	r2, r9
 8003054:	6921      	ldr	r1, [r4, #16]
 8003056:	f000 fafd 	bl	8003654 <memcpy>
 800305a:	89a3      	ldrh	r3, [r4, #12]
 800305c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003064:	81a3      	strh	r3, [r4, #12]
 8003066:	6126      	str	r6, [r4, #16]
 8003068:	444e      	add	r6, r9
 800306a:	6026      	str	r6, [r4, #0]
 800306c:	463e      	mov	r6, r7
 800306e:	6165      	str	r5, [r4, #20]
 8003070:	eba5 0509 	sub.w	r5, r5, r9
 8003074:	60a5      	str	r5, [r4, #8]
 8003076:	42be      	cmp	r6, r7
 8003078:	d900      	bls.n	800307c <__ssputs_r+0x70>
 800307a:	463e      	mov	r6, r7
 800307c:	4632      	mov	r2, r6
 800307e:	4641      	mov	r1, r8
 8003080:	6820      	ldr	r0, [r4, #0]
 8003082:	f000 faaf 	bl	80035e4 <memmove>
 8003086:	2000      	movs	r0, #0
 8003088:	68a3      	ldr	r3, [r4, #8]
 800308a:	1b9b      	subs	r3, r3, r6
 800308c:	60a3      	str	r3, [r4, #8]
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	4433      	add	r3, r6
 8003092:	6023      	str	r3, [r4, #0]
 8003094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003098:	462a      	mov	r2, r5
 800309a:	f000 fae9 	bl	8003670 <_realloc_r>
 800309e:	4606      	mov	r6, r0
 80030a0:	2800      	cmp	r0, #0
 80030a2:	d1e0      	bne.n	8003066 <__ssputs_r+0x5a>
 80030a4:	4650      	mov	r0, sl
 80030a6:	6921      	ldr	r1, [r4, #16]
 80030a8:	f7ff febc 	bl	8002e24 <_free_r>
 80030ac:	230c      	movs	r3, #12
 80030ae:	f8ca 3000 	str.w	r3, [sl]
 80030b2:	89a3      	ldrh	r3, [r4, #12]
 80030b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030bc:	81a3      	strh	r3, [r4, #12]
 80030be:	e7e9      	b.n	8003094 <__ssputs_r+0x88>

080030c0 <_svfiprintf_r>:
 80030c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030c4:	4698      	mov	r8, r3
 80030c6:	898b      	ldrh	r3, [r1, #12]
 80030c8:	4607      	mov	r7, r0
 80030ca:	061b      	lsls	r3, r3, #24
 80030cc:	460d      	mov	r5, r1
 80030ce:	4614      	mov	r4, r2
 80030d0:	b09d      	sub	sp, #116	; 0x74
 80030d2:	d50e      	bpl.n	80030f2 <_svfiprintf_r+0x32>
 80030d4:	690b      	ldr	r3, [r1, #16]
 80030d6:	b963      	cbnz	r3, 80030f2 <_svfiprintf_r+0x32>
 80030d8:	2140      	movs	r1, #64	; 0x40
 80030da:	f7ff ff0b 	bl	8002ef4 <_malloc_r>
 80030de:	6028      	str	r0, [r5, #0]
 80030e0:	6128      	str	r0, [r5, #16]
 80030e2:	b920      	cbnz	r0, 80030ee <_svfiprintf_r+0x2e>
 80030e4:	230c      	movs	r3, #12
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030ec:	e0d0      	b.n	8003290 <_svfiprintf_r+0x1d0>
 80030ee:	2340      	movs	r3, #64	; 0x40
 80030f0:	616b      	str	r3, [r5, #20]
 80030f2:	2300      	movs	r3, #0
 80030f4:	9309      	str	r3, [sp, #36]	; 0x24
 80030f6:	2320      	movs	r3, #32
 80030f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030fc:	2330      	movs	r3, #48	; 0x30
 80030fe:	f04f 0901 	mov.w	r9, #1
 8003102:	f8cd 800c 	str.w	r8, [sp, #12]
 8003106:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80032a8 <_svfiprintf_r+0x1e8>
 800310a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800310e:	4623      	mov	r3, r4
 8003110:	469a      	mov	sl, r3
 8003112:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003116:	b10a      	cbz	r2, 800311c <_svfiprintf_r+0x5c>
 8003118:	2a25      	cmp	r2, #37	; 0x25
 800311a:	d1f9      	bne.n	8003110 <_svfiprintf_r+0x50>
 800311c:	ebba 0b04 	subs.w	fp, sl, r4
 8003120:	d00b      	beq.n	800313a <_svfiprintf_r+0x7a>
 8003122:	465b      	mov	r3, fp
 8003124:	4622      	mov	r2, r4
 8003126:	4629      	mov	r1, r5
 8003128:	4638      	mov	r0, r7
 800312a:	f7ff ff6f 	bl	800300c <__ssputs_r>
 800312e:	3001      	adds	r0, #1
 8003130:	f000 80a9 	beq.w	8003286 <_svfiprintf_r+0x1c6>
 8003134:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003136:	445a      	add	r2, fp
 8003138:	9209      	str	r2, [sp, #36]	; 0x24
 800313a:	f89a 3000 	ldrb.w	r3, [sl]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 80a1 	beq.w	8003286 <_svfiprintf_r+0x1c6>
 8003144:	2300      	movs	r3, #0
 8003146:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800314a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800314e:	f10a 0a01 	add.w	sl, sl, #1
 8003152:	9304      	str	r3, [sp, #16]
 8003154:	9307      	str	r3, [sp, #28]
 8003156:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800315a:	931a      	str	r3, [sp, #104]	; 0x68
 800315c:	4654      	mov	r4, sl
 800315e:	2205      	movs	r2, #5
 8003160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003164:	4850      	ldr	r0, [pc, #320]	; (80032a8 <_svfiprintf_r+0x1e8>)
 8003166:	f000 fa67 	bl	8003638 <memchr>
 800316a:	9a04      	ldr	r2, [sp, #16]
 800316c:	b9d8      	cbnz	r0, 80031a6 <_svfiprintf_r+0xe6>
 800316e:	06d0      	lsls	r0, r2, #27
 8003170:	bf44      	itt	mi
 8003172:	2320      	movmi	r3, #32
 8003174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003178:	0711      	lsls	r1, r2, #28
 800317a:	bf44      	itt	mi
 800317c:	232b      	movmi	r3, #43	; 0x2b
 800317e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003182:	f89a 3000 	ldrb.w	r3, [sl]
 8003186:	2b2a      	cmp	r3, #42	; 0x2a
 8003188:	d015      	beq.n	80031b6 <_svfiprintf_r+0xf6>
 800318a:	4654      	mov	r4, sl
 800318c:	2000      	movs	r0, #0
 800318e:	f04f 0c0a 	mov.w	ip, #10
 8003192:	9a07      	ldr	r2, [sp, #28]
 8003194:	4621      	mov	r1, r4
 8003196:	f811 3b01 	ldrb.w	r3, [r1], #1
 800319a:	3b30      	subs	r3, #48	; 0x30
 800319c:	2b09      	cmp	r3, #9
 800319e:	d94d      	bls.n	800323c <_svfiprintf_r+0x17c>
 80031a0:	b1b0      	cbz	r0, 80031d0 <_svfiprintf_r+0x110>
 80031a2:	9207      	str	r2, [sp, #28]
 80031a4:	e014      	b.n	80031d0 <_svfiprintf_r+0x110>
 80031a6:	eba0 0308 	sub.w	r3, r0, r8
 80031aa:	fa09 f303 	lsl.w	r3, r9, r3
 80031ae:	4313      	orrs	r3, r2
 80031b0:	46a2      	mov	sl, r4
 80031b2:	9304      	str	r3, [sp, #16]
 80031b4:	e7d2      	b.n	800315c <_svfiprintf_r+0x9c>
 80031b6:	9b03      	ldr	r3, [sp, #12]
 80031b8:	1d19      	adds	r1, r3, #4
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	9103      	str	r1, [sp, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	bfbb      	ittet	lt
 80031c2:	425b      	neglt	r3, r3
 80031c4:	f042 0202 	orrlt.w	r2, r2, #2
 80031c8:	9307      	strge	r3, [sp, #28]
 80031ca:	9307      	strlt	r3, [sp, #28]
 80031cc:	bfb8      	it	lt
 80031ce:	9204      	strlt	r2, [sp, #16]
 80031d0:	7823      	ldrb	r3, [r4, #0]
 80031d2:	2b2e      	cmp	r3, #46	; 0x2e
 80031d4:	d10c      	bne.n	80031f0 <_svfiprintf_r+0x130>
 80031d6:	7863      	ldrb	r3, [r4, #1]
 80031d8:	2b2a      	cmp	r3, #42	; 0x2a
 80031da:	d134      	bne.n	8003246 <_svfiprintf_r+0x186>
 80031dc:	9b03      	ldr	r3, [sp, #12]
 80031de:	3402      	adds	r4, #2
 80031e0:	1d1a      	adds	r2, r3, #4
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	9203      	str	r2, [sp, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	bfb8      	it	lt
 80031ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80031ee:	9305      	str	r3, [sp, #20]
 80031f0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80032ac <_svfiprintf_r+0x1ec>
 80031f4:	2203      	movs	r2, #3
 80031f6:	4650      	mov	r0, sl
 80031f8:	7821      	ldrb	r1, [r4, #0]
 80031fa:	f000 fa1d 	bl	8003638 <memchr>
 80031fe:	b138      	cbz	r0, 8003210 <_svfiprintf_r+0x150>
 8003200:	2240      	movs	r2, #64	; 0x40
 8003202:	9b04      	ldr	r3, [sp, #16]
 8003204:	eba0 000a 	sub.w	r0, r0, sl
 8003208:	4082      	lsls	r2, r0
 800320a:	4313      	orrs	r3, r2
 800320c:	3401      	adds	r4, #1
 800320e:	9304      	str	r3, [sp, #16]
 8003210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003214:	2206      	movs	r2, #6
 8003216:	4826      	ldr	r0, [pc, #152]	; (80032b0 <_svfiprintf_r+0x1f0>)
 8003218:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800321c:	f000 fa0c 	bl	8003638 <memchr>
 8003220:	2800      	cmp	r0, #0
 8003222:	d038      	beq.n	8003296 <_svfiprintf_r+0x1d6>
 8003224:	4b23      	ldr	r3, [pc, #140]	; (80032b4 <_svfiprintf_r+0x1f4>)
 8003226:	bb1b      	cbnz	r3, 8003270 <_svfiprintf_r+0x1b0>
 8003228:	9b03      	ldr	r3, [sp, #12]
 800322a:	3307      	adds	r3, #7
 800322c:	f023 0307 	bic.w	r3, r3, #7
 8003230:	3308      	adds	r3, #8
 8003232:	9303      	str	r3, [sp, #12]
 8003234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003236:	4433      	add	r3, r6
 8003238:	9309      	str	r3, [sp, #36]	; 0x24
 800323a:	e768      	b.n	800310e <_svfiprintf_r+0x4e>
 800323c:	460c      	mov	r4, r1
 800323e:	2001      	movs	r0, #1
 8003240:	fb0c 3202 	mla	r2, ip, r2, r3
 8003244:	e7a6      	b.n	8003194 <_svfiprintf_r+0xd4>
 8003246:	2300      	movs	r3, #0
 8003248:	f04f 0c0a 	mov.w	ip, #10
 800324c:	4619      	mov	r1, r3
 800324e:	3401      	adds	r4, #1
 8003250:	9305      	str	r3, [sp, #20]
 8003252:	4620      	mov	r0, r4
 8003254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003258:	3a30      	subs	r2, #48	; 0x30
 800325a:	2a09      	cmp	r2, #9
 800325c:	d903      	bls.n	8003266 <_svfiprintf_r+0x1a6>
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0c6      	beq.n	80031f0 <_svfiprintf_r+0x130>
 8003262:	9105      	str	r1, [sp, #20]
 8003264:	e7c4      	b.n	80031f0 <_svfiprintf_r+0x130>
 8003266:	4604      	mov	r4, r0
 8003268:	2301      	movs	r3, #1
 800326a:	fb0c 2101 	mla	r1, ip, r1, r2
 800326e:	e7f0      	b.n	8003252 <_svfiprintf_r+0x192>
 8003270:	ab03      	add	r3, sp, #12
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	462a      	mov	r2, r5
 8003276:	4638      	mov	r0, r7
 8003278:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <_svfiprintf_r+0x1f8>)
 800327a:	a904      	add	r1, sp, #16
 800327c:	f3af 8000 	nop.w
 8003280:	1c42      	adds	r2, r0, #1
 8003282:	4606      	mov	r6, r0
 8003284:	d1d6      	bne.n	8003234 <_svfiprintf_r+0x174>
 8003286:	89ab      	ldrh	r3, [r5, #12]
 8003288:	065b      	lsls	r3, r3, #25
 800328a:	f53f af2d 	bmi.w	80030e8 <_svfiprintf_r+0x28>
 800328e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003290:	b01d      	add	sp, #116	; 0x74
 8003292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003296:	ab03      	add	r3, sp, #12
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	462a      	mov	r2, r5
 800329c:	4638      	mov	r0, r7
 800329e:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <_svfiprintf_r+0x1f8>)
 80032a0:	a904      	add	r1, sp, #16
 80032a2:	f000 f87d 	bl	80033a0 <_printf_i>
 80032a6:	e7eb      	b.n	8003280 <_svfiprintf_r+0x1c0>
 80032a8:	08003742 	.word	0x08003742
 80032ac:	08003748 	.word	0x08003748
 80032b0:	0800374c 	.word	0x0800374c
 80032b4:	00000000 	.word	0x00000000
 80032b8:	0800300d 	.word	0x0800300d

080032bc <_printf_common>:
 80032bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032c0:	4616      	mov	r6, r2
 80032c2:	4699      	mov	r9, r3
 80032c4:	688a      	ldr	r2, [r1, #8]
 80032c6:	690b      	ldr	r3, [r1, #16]
 80032c8:	4607      	mov	r7, r0
 80032ca:	4293      	cmp	r3, r2
 80032cc:	bfb8      	it	lt
 80032ce:	4613      	movlt	r3, r2
 80032d0:	6033      	str	r3, [r6, #0]
 80032d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032d6:	460c      	mov	r4, r1
 80032d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032dc:	b10a      	cbz	r2, 80032e2 <_printf_common+0x26>
 80032de:	3301      	adds	r3, #1
 80032e0:	6033      	str	r3, [r6, #0]
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	0699      	lsls	r1, r3, #26
 80032e6:	bf42      	ittt	mi
 80032e8:	6833      	ldrmi	r3, [r6, #0]
 80032ea:	3302      	addmi	r3, #2
 80032ec:	6033      	strmi	r3, [r6, #0]
 80032ee:	6825      	ldr	r5, [r4, #0]
 80032f0:	f015 0506 	ands.w	r5, r5, #6
 80032f4:	d106      	bne.n	8003304 <_printf_common+0x48>
 80032f6:	f104 0a19 	add.w	sl, r4, #25
 80032fa:	68e3      	ldr	r3, [r4, #12]
 80032fc:	6832      	ldr	r2, [r6, #0]
 80032fe:	1a9b      	subs	r3, r3, r2
 8003300:	42ab      	cmp	r3, r5
 8003302:	dc2b      	bgt.n	800335c <_printf_common+0xa0>
 8003304:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003308:	1e13      	subs	r3, r2, #0
 800330a:	6822      	ldr	r2, [r4, #0]
 800330c:	bf18      	it	ne
 800330e:	2301      	movne	r3, #1
 8003310:	0692      	lsls	r2, r2, #26
 8003312:	d430      	bmi.n	8003376 <_printf_common+0xba>
 8003314:	4649      	mov	r1, r9
 8003316:	4638      	mov	r0, r7
 8003318:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800331c:	47c0      	blx	r8
 800331e:	3001      	adds	r0, #1
 8003320:	d023      	beq.n	800336a <_printf_common+0xae>
 8003322:	6823      	ldr	r3, [r4, #0]
 8003324:	6922      	ldr	r2, [r4, #16]
 8003326:	f003 0306 	and.w	r3, r3, #6
 800332a:	2b04      	cmp	r3, #4
 800332c:	bf14      	ite	ne
 800332e:	2500      	movne	r5, #0
 8003330:	6833      	ldreq	r3, [r6, #0]
 8003332:	f04f 0600 	mov.w	r6, #0
 8003336:	bf08      	it	eq
 8003338:	68e5      	ldreq	r5, [r4, #12]
 800333a:	f104 041a 	add.w	r4, r4, #26
 800333e:	bf08      	it	eq
 8003340:	1aed      	subeq	r5, r5, r3
 8003342:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003346:	bf08      	it	eq
 8003348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800334c:	4293      	cmp	r3, r2
 800334e:	bfc4      	itt	gt
 8003350:	1a9b      	subgt	r3, r3, r2
 8003352:	18ed      	addgt	r5, r5, r3
 8003354:	42b5      	cmp	r5, r6
 8003356:	d11a      	bne.n	800338e <_printf_common+0xd2>
 8003358:	2000      	movs	r0, #0
 800335a:	e008      	b.n	800336e <_printf_common+0xb2>
 800335c:	2301      	movs	r3, #1
 800335e:	4652      	mov	r2, sl
 8003360:	4649      	mov	r1, r9
 8003362:	4638      	mov	r0, r7
 8003364:	47c0      	blx	r8
 8003366:	3001      	adds	r0, #1
 8003368:	d103      	bne.n	8003372 <_printf_common+0xb6>
 800336a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800336e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003372:	3501      	adds	r5, #1
 8003374:	e7c1      	b.n	80032fa <_printf_common+0x3e>
 8003376:	2030      	movs	r0, #48	; 0x30
 8003378:	18e1      	adds	r1, r4, r3
 800337a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003384:	4422      	add	r2, r4
 8003386:	3302      	adds	r3, #2
 8003388:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800338c:	e7c2      	b.n	8003314 <_printf_common+0x58>
 800338e:	2301      	movs	r3, #1
 8003390:	4622      	mov	r2, r4
 8003392:	4649      	mov	r1, r9
 8003394:	4638      	mov	r0, r7
 8003396:	47c0      	blx	r8
 8003398:	3001      	adds	r0, #1
 800339a:	d0e6      	beq.n	800336a <_printf_common+0xae>
 800339c:	3601      	adds	r6, #1
 800339e:	e7d9      	b.n	8003354 <_printf_common+0x98>

080033a0 <_printf_i>:
 80033a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033a4:	7e0f      	ldrb	r7, [r1, #24]
 80033a6:	4691      	mov	r9, r2
 80033a8:	2f78      	cmp	r7, #120	; 0x78
 80033aa:	4680      	mov	r8, r0
 80033ac:	460c      	mov	r4, r1
 80033ae:	469a      	mov	sl, r3
 80033b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80033b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80033b6:	d807      	bhi.n	80033c8 <_printf_i+0x28>
 80033b8:	2f62      	cmp	r7, #98	; 0x62
 80033ba:	d80a      	bhi.n	80033d2 <_printf_i+0x32>
 80033bc:	2f00      	cmp	r7, #0
 80033be:	f000 80d5 	beq.w	800356c <_printf_i+0x1cc>
 80033c2:	2f58      	cmp	r7, #88	; 0x58
 80033c4:	f000 80c1 	beq.w	800354a <_printf_i+0x1aa>
 80033c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033d0:	e03a      	b.n	8003448 <_printf_i+0xa8>
 80033d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033d6:	2b15      	cmp	r3, #21
 80033d8:	d8f6      	bhi.n	80033c8 <_printf_i+0x28>
 80033da:	a101      	add	r1, pc, #4	; (adr r1, 80033e0 <_printf_i+0x40>)
 80033dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033e0:	08003439 	.word	0x08003439
 80033e4:	0800344d 	.word	0x0800344d
 80033e8:	080033c9 	.word	0x080033c9
 80033ec:	080033c9 	.word	0x080033c9
 80033f0:	080033c9 	.word	0x080033c9
 80033f4:	080033c9 	.word	0x080033c9
 80033f8:	0800344d 	.word	0x0800344d
 80033fc:	080033c9 	.word	0x080033c9
 8003400:	080033c9 	.word	0x080033c9
 8003404:	080033c9 	.word	0x080033c9
 8003408:	080033c9 	.word	0x080033c9
 800340c:	08003553 	.word	0x08003553
 8003410:	08003479 	.word	0x08003479
 8003414:	0800350d 	.word	0x0800350d
 8003418:	080033c9 	.word	0x080033c9
 800341c:	080033c9 	.word	0x080033c9
 8003420:	08003575 	.word	0x08003575
 8003424:	080033c9 	.word	0x080033c9
 8003428:	08003479 	.word	0x08003479
 800342c:	080033c9 	.word	0x080033c9
 8003430:	080033c9 	.word	0x080033c9
 8003434:	08003515 	.word	0x08003515
 8003438:	682b      	ldr	r3, [r5, #0]
 800343a:	1d1a      	adds	r2, r3, #4
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	602a      	str	r2, [r5, #0]
 8003440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003448:	2301      	movs	r3, #1
 800344a:	e0a0      	b.n	800358e <_printf_i+0x1ee>
 800344c:	6820      	ldr	r0, [r4, #0]
 800344e:	682b      	ldr	r3, [r5, #0]
 8003450:	0607      	lsls	r7, r0, #24
 8003452:	f103 0104 	add.w	r1, r3, #4
 8003456:	6029      	str	r1, [r5, #0]
 8003458:	d501      	bpl.n	800345e <_printf_i+0xbe>
 800345a:	681e      	ldr	r6, [r3, #0]
 800345c:	e003      	b.n	8003466 <_printf_i+0xc6>
 800345e:	0646      	lsls	r6, r0, #25
 8003460:	d5fb      	bpl.n	800345a <_printf_i+0xba>
 8003462:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003466:	2e00      	cmp	r6, #0
 8003468:	da03      	bge.n	8003472 <_printf_i+0xd2>
 800346a:	232d      	movs	r3, #45	; 0x2d
 800346c:	4276      	negs	r6, r6
 800346e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003472:	230a      	movs	r3, #10
 8003474:	4859      	ldr	r0, [pc, #356]	; (80035dc <_printf_i+0x23c>)
 8003476:	e012      	b.n	800349e <_printf_i+0xfe>
 8003478:	682b      	ldr	r3, [r5, #0]
 800347a:	6820      	ldr	r0, [r4, #0]
 800347c:	1d19      	adds	r1, r3, #4
 800347e:	6029      	str	r1, [r5, #0]
 8003480:	0605      	lsls	r5, r0, #24
 8003482:	d501      	bpl.n	8003488 <_printf_i+0xe8>
 8003484:	681e      	ldr	r6, [r3, #0]
 8003486:	e002      	b.n	800348e <_printf_i+0xee>
 8003488:	0641      	lsls	r1, r0, #25
 800348a:	d5fb      	bpl.n	8003484 <_printf_i+0xe4>
 800348c:	881e      	ldrh	r6, [r3, #0]
 800348e:	2f6f      	cmp	r7, #111	; 0x6f
 8003490:	bf0c      	ite	eq
 8003492:	2308      	moveq	r3, #8
 8003494:	230a      	movne	r3, #10
 8003496:	4851      	ldr	r0, [pc, #324]	; (80035dc <_printf_i+0x23c>)
 8003498:	2100      	movs	r1, #0
 800349a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800349e:	6865      	ldr	r5, [r4, #4]
 80034a0:	2d00      	cmp	r5, #0
 80034a2:	bfa8      	it	ge
 80034a4:	6821      	ldrge	r1, [r4, #0]
 80034a6:	60a5      	str	r5, [r4, #8]
 80034a8:	bfa4      	itt	ge
 80034aa:	f021 0104 	bicge.w	r1, r1, #4
 80034ae:	6021      	strge	r1, [r4, #0]
 80034b0:	b90e      	cbnz	r6, 80034b6 <_printf_i+0x116>
 80034b2:	2d00      	cmp	r5, #0
 80034b4:	d04b      	beq.n	800354e <_printf_i+0x1ae>
 80034b6:	4615      	mov	r5, r2
 80034b8:	fbb6 f1f3 	udiv	r1, r6, r3
 80034bc:	fb03 6711 	mls	r7, r3, r1, r6
 80034c0:	5dc7      	ldrb	r7, [r0, r7]
 80034c2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80034c6:	4637      	mov	r7, r6
 80034c8:	42bb      	cmp	r3, r7
 80034ca:	460e      	mov	r6, r1
 80034cc:	d9f4      	bls.n	80034b8 <_printf_i+0x118>
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d10b      	bne.n	80034ea <_printf_i+0x14a>
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	07de      	lsls	r6, r3, #31
 80034d6:	d508      	bpl.n	80034ea <_printf_i+0x14a>
 80034d8:	6923      	ldr	r3, [r4, #16]
 80034da:	6861      	ldr	r1, [r4, #4]
 80034dc:	4299      	cmp	r1, r3
 80034de:	bfde      	ittt	le
 80034e0:	2330      	movle	r3, #48	; 0x30
 80034e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034e6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80034ea:	1b52      	subs	r2, r2, r5
 80034ec:	6122      	str	r2, [r4, #16]
 80034ee:	464b      	mov	r3, r9
 80034f0:	4621      	mov	r1, r4
 80034f2:	4640      	mov	r0, r8
 80034f4:	f8cd a000 	str.w	sl, [sp]
 80034f8:	aa03      	add	r2, sp, #12
 80034fa:	f7ff fedf 	bl	80032bc <_printf_common>
 80034fe:	3001      	adds	r0, #1
 8003500:	d14a      	bne.n	8003598 <_printf_i+0x1f8>
 8003502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003506:	b004      	add	sp, #16
 8003508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800350c:	6823      	ldr	r3, [r4, #0]
 800350e:	f043 0320 	orr.w	r3, r3, #32
 8003512:	6023      	str	r3, [r4, #0]
 8003514:	2778      	movs	r7, #120	; 0x78
 8003516:	4832      	ldr	r0, [pc, #200]	; (80035e0 <_printf_i+0x240>)
 8003518:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800351c:	6823      	ldr	r3, [r4, #0]
 800351e:	6829      	ldr	r1, [r5, #0]
 8003520:	061f      	lsls	r7, r3, #24
 8003522:	f851 6b04 	ldr.w	r6, [r1], #4
 8003526:	d402      	bmi.n	800352e <_printf_i+0x18e>
 8003528:	065f      	lsls	r7, r3, #25
 800352a:	bf48      	it	mi
 800352c:	b2b6      	uxthmi	r6, r6
 800352e:	07df      	lsls	r7, r3, #31
 8003530:	bf48      	it	mi
 8003532:	f043 0320 	orrmi.w	r3, r3, #32
 8003536:	6029      	str	r1, [r5, #0]
 8003538:	bf48      	it	mi
 800353a:	6023      	strmi	r3, [r4, #0]
 800353c:	b91e      	cbnz	r6, 8003546 <_printf_i+0x1a6>
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	f023 0320 	bic.w	r3, r3, #32
 8003544:	6023      	str	r3, [r4, #0]
 8003546:	2310      	movs	r3, #16
 8003548:	e7a6      	b.n	8003498 <_printf_i+0xf8>
 800354a:	4824      	ldr	r0, [pc, #144]	; (80035dc <_printf_i+0x23c>)
 800354c:	e7e4      	b.n	8003518 <_printf_i+0x178>
 800354e:	4615      	mov	r5, r2
 8003550:	e7bd      	b.n	80034ce <_printf_i+0x12e>
 8003552:	682b      	ldr	r3, [r5, #0]
 8003554:	6826      	ldr	r6, [r4, #0]
 8003556:	1d18      	adds	r0, r3, #4
 8003558:	6961      	ldr	r1, [r4, #20]
 800355a:	6028      	str	r0, [r5, #0]
 800355c:	0635      	lsls	r5, r6, #24
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	d501      	bpl.n	8003566 <_printf_i+0x1c6>
 8003562:	6019      	str	r1, [r3, #0]
 8003564:	e002      	b.n	800356c <_printf_i+0x1cc>
 8003566:	0670      	lsls	r0, r6, #25
 8003568:	d5fb      	bpl.n	8003562 <_printf_i+0x1c2>
 800356a:	8019      	strh	r1, [r3, #0]
 800356c:	2300      	movs	r3, #0
 800356e:	4615      	mov	r5, r2
 8003570:	6123      	str	r3, [r4, #16]
 8003572:	e7bc      	b.n	80034ee <_printf_i+0x14e>
 8003574:	682b      	ldr	r3, [r5, #0]
 8003576:	2100      	movs	r1, #0
 8003578:	1d1a      	adds	r2, r3, #4
 800357a:	602a      	str	r2, [r5, #0]
 800357c:	681d      	ldr	r5, [r3, #0]
 800357e:	6862      	ldr	r2, [r4, #4]
 8003580:	4628      	mov	r0, r5
 8003582:	f000 f859 	bl	8003638 <memchr>
 8003586:	b108      	cbz	r0, 800358c <_printf_i+0x1ec>
 8003588:	1b40      	subs	r0, r0, r5
 800358a:	6060      	str	r0, [r4, #4]
 800358c:	6863      	ldr	r3, [r4, #4]
 800358e:	6123      	str	r3, [r4, #16]
 8003590:	2300      	movs	r3, #0
 8003592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003596:	e7aa      	b.n	80034ee <_printf_i+0x14e>
 8003598:	462a      	mov	r2, r5
 800359a:	4649      	mov	r1, r9
 800359c:	4640      	mov	r0, r8
 800359e:	6923      	ldr	r3, [r4, #16]
 80035a0:	47d0      	blx	sl
 80035a2:	3001      	adds	r0, #1
 80035a4:	d0ad      	beq.n	8003502 <_printf_i+0x162>
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	079b      	lsls	r3, r3, #30
 80035aa:	d413      	bmi.n	80035d4 <_printf_i+0x234>
 80035ac:	68e0      	ldr	r0, [r4, #12]
 80035ae:	9b03      	ldr	r3, [sp, #12]
 80035b0:	4298      	cmp	r0, r3
 80035b2:	bfb8      	it	lt
 80035b4:	4618      	movlt	r0, r3
 80035b6:	e7a6      	b.n	8003506 <_printf_i+0x166>
 80035b8:	2301      	movs	r3, #1
 80035ba:	4632      	mov	r2, r6
 80035bc:	4649      	mov	r1, r9
 80035be:	4640      	mov	r0, r8
 80035c0:	47d0      	blx	sl
 80035c2:	3001      	adds	r0, #1
 80035c4:	d09d      	beq.n	8003502 <_printf_i+0x162>
 80035c6:	3501      	adds	r5, #1
 80035c8:	68e3      	ldr	r3, [r4, #12]
 80035ca:	9903      	ldr	r1, [sp, #12]
 80035cc:	1a5b      	subs	r3, r3, r1
 80035ce:	42ab      	cmp	r3, r5
 80035d0:	dcf2      	bgt.n	80035b8 <_printf_i+0x218>
 80035d2:	e7eb      	b.n	80035ac <_printf_i+0x20c>
 80035d4:	2500      	movs	r5, #0
 80035d6:	f104 0619 	add.w	r6, r4, #25
 80035da:	e7f5      	b.n	80035c8 <_printf_i+0x228>
 80035dc:	08003753 	.word	0x08003753
 80035e0:	08003764 	.word	0x08003764

080035e4 <memmove>:
 80035e4:	4288      	cmp	r0, r1
 80035e6:	b510      	push	{r4, lr}
 80035e8:	eb01 0402 	add.w	r4, r1, r2
 80035ec:	d902      	bls.n	80035f4 <memmove+0x10>
 80035ee:	4284      	cmp	r4, r0
 80035f0:	4623      	mov	r3, r4
 80035f2:	d807      	bhi.n	8003604 <memmove+0x20>
 80035f4:	1e43      	subs	r3, r0, #1
 80035f6:	42a1      	cmp	r1, r4
 80035f8:	d008      	beq.n	800360c <memmove+0x28>
 80035fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003602:	e7f8      	b.n	80035f6 <memmove+0x12>
 8003604:	4601      	mov	r1, r0
 8003606:	4402      	add	r2, r0
 8003608:	428a      	cmp	r2, r1
 800360a:	d100      	bne.n	800360e <memmove+0x2a>
 800360c:	bd10      	pop	{r4, pc}
 800360e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003612:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003616:	e7f7      	b.n	8003608 <memmove+0x24>

08003618 <_sbrk_r>:
 8003618:	b538      	push	{r3, r4, r5, lr}
 800361a:	2300      	movs	r3, #0
 800361c:	4d05      	ldr	r5, [pc, #20]	; (8003634 <_sbrk_r+0x1c>)
 800361e:	4604      	mov	r4, r0
 8003620:	4608      	mov	r0, r1
 8003622:	602b      	str	r3, [r5, #0]
 8003624:	f7fd fa74 	bl	8000b10 <_sbrk>
 8003628:	1c43      	adds	r3, r0, #1
 800362a:	d102      	bne.n	8003632 <_sbrk_r+0x1a>
 800362c:	682b      	ldr	r3, [r5, #0]
 800362e:	b103      	cbz	r3, 8003632 <_sbrk_r+0x1a>
 8003630:	6023      	str	r3, [r4, #0]
 8003632:	bd38      	pop	{r3, r4, r5, pc}
 8003634:	20000470 	.word	0x20000470

08003638 <memchr>:
 8003638:	4603      	mov	r3, r0
 800363a:	b510      	push	{r4, lr}
 800363c:	b2c9      	uxtb	r1, r1
 800363e:	4402      	add	r2, r0
 8003640:	4293      	cmp	r3, r2
 8003642:	4618      	mov	r0, r3
 8003644:	d101      	bne.n	800364a <memchr+0x12>
 8003646:	2000      	movs	r0, #0
 8003648:	e003      	b.n	8003652 <memchr+0x1a>
 800364a:	7804      	ldrb	r4, [r0, #0]
 800364c:	3301      	adds	r3, #1
 800364e:	428c      	cmp	r4, r1
 8003650:	d1f6      	bne.n	8003640 <memchr+0x8>
 8003652:	bd10      	pop	{r4, pc}

08003654 <memcpy>:
 8003654:	440a      	add	r2, r1
 8003656:	4291      	cmp	r1, r2
 8003658:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800365c:	d100      	bne.n	8003660 <memcpy+0xc>
 800365e:	4770      	bx	lr
 8003660:	b510      	push	{r4, lr}
 8003662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003666:	4291      	cmp	r1, r2
 8003668:	f803 4f01 	strb.w	r4, [r3, #1]!
 800366c:	d1f9      	bne.n	8003662 <memcpy+0xe>
 800366e:	bd10      	pop	{r4, pc}

08003670 <_realloc_r>:
 8003670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003674:	4680      	mov	r8, r0
 8003676:	4614      	mov	r4, r2
 8003678:	460e      	mov	r6, r1
 800367a:	b921      	cbnz	r1, 8003686 <_realloc_r+0x16>
 800367c:	4611      	mov	r1, r2
 800367e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003682:	f7ff bc37 	b.w	8002ef4 <_malloc_r>
 8003686:	b92a      	cbnz	r2, 8003694 <_realloc_r+0x24>
 8003688:	f7ff fbcc 	bl	8002e24 <_free_r>
 800368c:	4625      	mov	r5, r4
 800368e:	4628      	mov	r0, r5
 8003690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003694:	f000 f81b 	bl	80036ce <_malloc_usable_size_r>
 8003698:	4284      	cmp	r4, r0
 800369a:	4607      	mov	r7, r0
 800369c:	d802      	bhi.n	80036a4 <_realloc_r+0x34>
 800369e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80036a2:	d812      	bhi.n	80036ca <_realloc_r+0x5a>
 80036a4:	4621      	mov	r1, r4
 80036a6:	4640      	mov	r0, r8
 80036a8:	f7ff fc24 	bl	8002ef4 <_malloc_r>
 80036ac:	4605      	mov	r5, r0
 80036ae:	2800      	cmp	r0, #0
 80036b0:	d0ed      	beq.n	800368e <_realloc_r+0x1e>
 80036b2:	42bc      	cmp	r4, r7
 80036b4:	4622      	mov	r2, r4
 80036b6:	4631      	mov	r1, r6
 80036b8:	bf28      	it	cs
 80036ba:	463a      	movcs	r2, r7
 80036bc:	f7ff ffca 	bl	8003654 <memcpy>
 80036c0:	4631      	mov	r1, r6
 80036c2:	4640      	mov	r0, r8
 80036c4:	f7ff fbae 	bl	8002e24 <_free_r>
 80036c8:	e7e1      	b.n	800368e <_realloc_r+0x1e>
 80036ca:	4635      	mov	r5, r6
 80036cc:	e7df      	b.n	800368e <_realloc_r+0x1e>

080036ce <_malloc_usable_size_r>:
 80036ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036d2:	1f18      	subs	r0, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	bfbc      	itt	lt
 80036d8:	580b      	ldrlt	r3, [r1, r0]
 80036da:	18c0      	addlt	r0, r0, r3
 80036dc:	4770      	bx	lr
	...

080036e0 <_init>:
 80036e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e2:	bf00      	nop
 80036e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036e6:	bc08      	pop	{r3}
 80036e8:	469e      	mov	lr, r3
 80036ea:	4770      	bx	lr

080036ec <_fini>:
 80036ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ee:	bf00      	nop
 80036f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036f2:	bc08      	pop	{r3}
 80036f4:	469e      	mov	lr, r3
 80036f6:	4770      	bx	lr
